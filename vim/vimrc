" ------------------------------------------------------------------------------
" VUNDLE

set nocompatible                    " Don't try to be compatible with the original vi

if has('gui_macvim')
  set pythonthreedll=~/env/pyenv/versions/3.12.2/lib/libpython3.12.dylib
endif

if has('nvim') && has('mac')
  let g:python3_host_prog = '/opt/homebrew/opt/python@3.11/Frameworks/Python.framework/Versions/3.11/bin/python3'
endif

if has('nvim')
  set runtimepath^=~/.vim
  set runtimepath+=~/.vim/after
  let &packpath = &runtimepath
endif

set packpath^=~/src/wip/vim
set runtimepath^=~/src/wip/vim
set runtimepath^=/opt/homebrew/Cellar/lilypond/*/share/lilypond/*/vim

call plug#begin('~/.vim/bundle')

" GitHub Plugins
Plug 'altercation/vim-colors-solarized'
Plug 'andrewradev/bufferize.vim'
Plug 'chrisbra/unicode.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dag/vim-fish'
Plug 'dhruvasagar/vim-table-mode'
Plug 'dhruvasagar/vim-zoom'
Plug 'dkarter/bullets.vim'
Plug 'dyng/ctrlsf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'fatih/vim-go'
" Plug 'foalford/vim-markdown-folding'
Plug 'godlygeek/tabular'
Plug 'google/vim-jsonnet'
Plug 'hashivim/vim-terraform'
Plug 'inkarkat/vim-ingo-library'
Plug 'inkarkat/vim-mark'
Plug 'inkarkat/vim-CountJump'
Plug 'inkarkat/vim-SameHighlightMotion'
Plug 'inkarkat/vim-SearchAlternatives'
Plug 'inkarkat/vim-SearchHighlighting'
Plug 'inkarkat/vim-UnconditionalPaste'
Plug 'jgm/djot', { 'rtp': 'editors/vim' }
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
Plug 'myusuf3/numbers.vim'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-tbone'
Plug 'tpope/vim-unimpaired'
Plug 'troydm/easybuffer.vim'
Plug 'udalov/kotlin-vim'

" macOS: UltiSnips can crash MacVim on startup if it's linked against the wrong
" Python. Not the fault of UltiSnips. See:
"   + https://github.com/SirVer/ultisnips/issues/771
"   + https://github.com/SirVer/ultisnips/issues/900
"
" If problems persist, blow away ~/.vim/bundle/ultisnips and start over with
" :PluginInstall.
Plug 'SirVer/ultisnips'

if !filereadable('/usr/share/vim/google/google.vim')
  Plug 'ervandew/supertab'
endif

if has('nvim')
  Plug 'ggandor/leap.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim', { 'branch': '0.1.x' }
  Plug 'nvim-telescope/telescope-symbols.nvim'
  Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
  Plug 'nvim-treesitter/nvim-treesitter-context'
endif

call plug#end()

" ------------------------------------------------------------------------------
" GOOGLE

if filereadable('/usr/share/vim/google/google.vim')
  let g:go_info_mode = 'guru'
  let g:go_gopls_enabled = 0

  let g:piperlib_ignored_dirs = ['/usr']  " b/78183173

  source /usr/share/vim/google/google.vim

  Glug blazedeps auto_filetypes=`['go']`
  Glug codefmt
  Glug codefmt-google
  Glug fileswitch plugin[mappings]='<Leader>j'
  Glug outline-window
  Glug youcompleteme-google

  " Disable autogen because it slows down EasyBuffer
  Glaive autogen !plugin[autocmds]

  " Disabling autoformatting for C++, protocol buffers, and Python because
  " clang-format and pyformat always format the whole file instead of just the
  " lines that have changed. See https://github.com/google/vim-codefmt/issues/9.
  " Don't need it for Go because I have the vim-go plugin installed.
  "
  " autocmd FileType go AutoFormatBuffer gofmt
  " autocmd FileType c,cpp AutoFormatBuffer clang-format
  " autocmd FileType proto AutoFormatBuffer clang-format
  " autocmd FileType python AutoFormatBuffer pyformat
  autocmd FileType bzl AutoFormatBuffer buildifier

  autocmd FileType go setlocal textwidth=100 winwidth=106 colorcolumn=+1,121,141
endif

" ------------------------------------------------------------------------------
" SETTINGS

set title                             " Set the terminal title to something appropriate (like the filename being edited)
set cmdheight=1                       " Set the height of the command line area
set cmdwinheight=9                    " Set the height of the command line window
set helpheight=80                     " Set the minimum window height for help windows
set winheight=20                      " Set the minimum window height for split windows
set winwidth=86                       " Set the minimum window width for split windows
set winminheight=3                    " Set the minimum window height for collapsed windows
set winminwidth=5                     " Set the minimum window width for collapsed windows
set pumheight=7                       " Set the maximum number of items to show in the popup menu for insert mode completion
set tabpagemax=100                    " Set the maximum number of tabs that can be opened
set splitbelow                        " When horizontally splitting a window, insert the new window below the current one
set splitright                        " When vertically splitting a window, insert the new window to the right of the current one
set number                            " Show line numbers
set signcolumn=number                 " Show signs in the number column instead of the sign column
set ruler                             " Show the cursor position in the bottom right
set showcmd                           " Show a partial command as it is being built
set laststatus=2                      " Always show the status bar (it tells us the filename)
set guioptions-=T                     " Get rid of the toolbar in gVim
set guioptions+=c                     " Don't use popup dialogs in gVim
set guioptions+=k                     " Keep the window size when adding or removing scrollbars
set guicursor+=n:blinkon0             " Don't blink the cursor in normal mode
set fillchars=vert:│                  " Use a box-drawing character to get a clean vertical line between splits
set titlestring=%t                    " Use a custom window title that just shows the filename
set tabline=%!SerbanTabLine()         " Use a custom tab line
set guitablabel=%!SerbanGuiTabLabel() " Use a custom tab title in gVim
set statusline=%!SerbanStatusLine()   " Use a custom status line

if has('gui_macvim') && has('gui_running')
  set guifont=Monaco:h15            " Use a good font in MacVim
  set lines=32                      " Centers nicely on a 13" MacBook Pro
  set columns=90                    " Centers nicely on a 13" MacBook Pro
  set macmeta                       " Use the option key (⌥) as a Meta key. Turn off to enable standard macOS special character keyboard shortcuts.
endif

"set columns=114                    " Put this line in gvimrc. It makes the window wider.
"set lines=52                       " Put this line in gvimrc. It makes the window taller.
set textwidth=80
set wrapmargin=0
set colorcolumn=+1                  " Show a vertical line one character past the textwidth to help maintain line length
set numberwidth=5                   " Set the minimum gutter width so that switching back and forth between number and relativenumber isn't annoying
set nowrap                          " Don't soft-wrap lines
set linebreak                       " When soft-wrap is on (`set wrap`) then break lines at whitespace points instead of where the window boundary is
set display=lastline                " Show as much as possible of the last line in a window instead of replacing it entirely with at signs
set breakindent                     " Indent lines that are soft-wrapped with the characters in 'showbreak'
set showbreak=⧽\                    " Prepend these characters to continuations of soft-wrapped lines
set nofoldenable                    " Don't fold code
set foldmethod=indent
set foldtext='⋮'
set sidescroll=16                   " When the cursor hits the end of the screen, scroll left or right by this many spaces
set sidescrolloff=10                " Always leave some space to the left and right of the cursor
set scrolloff=3                     " Always leave some lines above and below the cursor
set formatoptions=crqljt            " Auto-wrap comments, insert comment leader on <Enter>, gq formats comments, don't automatically fix long lines when entering insert mode, remove comment leaders when joining lines, hard wrap
set nojoinspaces                    " When formatting text, insert only one space at the end of a sentence.
set iskeyword+=-                    " Add hyphen to the list of characters that comprise a word
set encoding=utf-8                  " Default to UTF-8 encoding

set history=27                      " The number of commands, search patterns, expressions, and input() lines to remember
set viminfo='0,f0,<0,s0,h           " Do not store marks, file marks, or registers. Ignore previous hlsearch setting on startup
set directory=~/.local/state/vim//  " Store swap files in a dedicated directory. The trailing double-slash is not a typo.
set sessionoptions=buffers,curdir,folds,resize,tabpages,winpos,winsize  " What to preserve when saving a session

if !has('nvim')
set printoptions=paper:letter,left:36pt,right:36pt,bottom:27pt,top:27pt,header:2  " American letter paper with ~ 1/2 inch margins
set printheader=%{strftime(\'%B\ %e,\ %Y\')}%=%N                                  " Print the date in the upper left corner and page number in the upper right corner of every page
endif

syntax on                           " Colors!
set hlsearch                        " Highlight search results
set incsearch                       " Search as you type
set ignorecase                      " Case insensitive when searching...
set smartcase                       " unless there's an uppercase character in the search string
set nogdefault                      " Do not replace all occurrences on a line by default (s/old/new/g). Enabling gdefault inverts the meaning of the :substitute 'g' flag, which is unexpected and breaks plugins.
set nowrapscan                      " Do not wrap around the end of the file when searching

set wildmenu                        " Turn on visual selection of command line completions
set wildoptions=pum                 " Use a popup menu for command line completions
set wildmode=longest:full,full      " On the first press of <Tab>, complete until the end of the longest common substring and open the popup menu. On subsequent presses of <Tab>, complete the next full match.

set spellcapcheck=                  " Disable checking for a capital letter at the beginning of a sentence (SpellCap highlight).
set spelllang=en_us                 " Use American English for spell checking
set spellsuggest=best,9             " Limit spelling suggestions for z= to nine items
set spellfile=~/.vim/spell/en.utf-8.add,~/.vim/spell/proper.utf-8.add,~/.vim/spell/google.utf-8.add

set listchars=tab:»\ ,trail:⚐       " Show tabs and trailing whitespace
set list

set tabstop=8                       " \t is 8 characters wide
set shiftwidth=2                    " Shift commands are 2 characters wide
set softtabstop=2                   " Indents are 2 characters wide
set expandtab                       " Only use spaces (\t will never be inserted)

set shiftround                      " Round indent to a multiple of shiftwidth for > and <, and in insert mode for CTRL-T, and CTRL-D
set autoindent                      " Keep the indentation the same when inserting a new line
"set smartindent                    " Syntax-aware indenting
set modeline                        " Modelines in files take precedent over these settings

set ttimeout                        " Wait for full escape sequences to arrive …
set ttimeoutlen=10                  " … for up to ten milliseconds.
set timeout                         " Wait for full key mappings to arrive …
set timeoutlen=500                  " … for up to half a second.

" Don't move comment hashes to the beginning of the line when writing Python. This behavior is caused by smartindent.
inoremap # X#

set backspace=eol,indent,start      " Make life easier on crappy terminals

set mouse=a                         " Enable the mouse
if !has('nvim')
set ttymouse=sgr                    " Support mouse past the 223rd column
endif

set noautochdir                     " When enabled, keep the current directory in sync with the folder containing the open file
set autoread                        " If an open file has changed outside of Vim but was not modified inside of Vim, reload it without asking when running :checktime
set hidden                          " Allow buffers with unsaved changes to be hidden from view

" Vim sets `background` on startup based on the terminal's background color.
" This can sometimes result in Vim's theme being the opposite of the terminal's
" (light instead of dark or dark instead of light). When I want to toggle
" between light and dark themes in the terminal, I change the terminal colors in
" iTerm2 instead of toggling Vim's `background` setting. The Vim Solarized color
" scheme matches correctly with the terminal colors when `background=dark`, so
" peg the value here. See:
"   - :help 'background'
"   - :help t_RB
"   - :help v:termrbgresp
"   - https://vi.stackexchange.com/questions/16951/how-to-set-vims-background-based-on-terminals-background-colour
set background=dark

" Set unique cursor shapes for normal mode, insert mode, and replace mode. See:
" https://invisible-island.net/xterm/ctlseqs/ctlseqs.html - XTerm Control Sequences
let &t_EI = "\e[2 q"  "  Normal Mode → Block
let &t_SI = "\e[6 q"  "  Insert Mode → Vertical Bar
let &t_SR = "\e[4 q"  " Replace Mode → Underline

" Enable paste bracketing inside tmux. See:
" • :help xterm-bracketed-paste
" • :help tmux-integration
if &term =~# 'tmux'
  let &t_BE = "\e[?2004h"
  let &t_BD = "\e[?2004l"
  let &t_PS = "\e[200~"
  let &t_PE = "\e[201~"
endif

" ------------------------------------------------------------------------------
" META KEYS

" For a given key chord `⌥ + κ` iTerm2 sends two bytes: `0x1b` + `κ`.
" Neovim recognizes this as `<M-κ>` out of the box, but Vim does not. See:
" • https://vi.stackexchange.com/questions/2350/how-to-map-alt-key
" • :help :set-termcap
if !has('nvim')
execute "set <M-b>=\eb"
execute "set <M-c>=\ec"
execute "set <M-d>=\ed"
execute "set <M-e>=\ee"
execute "set <M-f>=\ef"
execute "set <M-h>=\eh"
execute "set <M-j>=\ej"
execute "set <M-k>=\ek"
execute "set <M-l>=\el"
execute "set <M-n>=\en"
execute "set <M-p>=\ep"
execute "set <M-q>=\eq"
execute "set <M-r>=\er"
execute "set <M-s>=\es"
execute "set <M-t>=\et"

execute "set <M-S-h>=\eH"
execute "set <M-S-j>=\eJ"
execute "set <M-S-k>=\eK"
execute "set <M-S-l>=\eL"
endif

" ------------------------------------------------------------------------------
" PLUGIN SETTINGS

" BUFFERIZE
let g:bufferize_command = 'botright vnew'
let g:bufferize_focus_output = 1

" BULLETS
let g:bullets_outline_levels = ['num', 'abc', 'std*', 'std+', 'std-', 'std+', 'std-']

" CTRLP
let g:ctrlp_map = ''  " Mapped below with all the others
let g:ctrlp_match_window = 'order:ttb,min:20,max:20'
let g:ctrlp_switch_buffer = ''
let g:ctrlp_clear_cache_on_exit = 1  " NB: This calls ctrlp#clra() on exit. This clears all caches, even those of other running Vim sessions. Caches are only cleared if you invoke CtrlP during the Vim session.
let g:ctrlp_extensions = ['autoignore']

" CTRLSF
let g:ctrlsf_position = 'right'
let g:ctrlsf_winsize = 106
let g:ctrlsf_auto_focus = { 'at': 'done' }
let g:ctrlsf_auto_close = { 'normal': 0, 'compact': 0 }
let g:ctrlsf_auto_preview = 0
let g:ctrlsf_absolute_file_path = 0  " Does nothing when autochdir is set.
let g:ctrlsf_indent = 2

function g:CtrlSFAfterMainWindowInit()
  NumbersDisable
  set nonumber
  set norelativenumber
endfunction

" EASYBUFFER
let g:easybuffer_use_sequence = 1                           " Use ascending numbers instead of buffer numbers for quick switching
let g:easybuffer_sort_mode = 'n'                            " Sort by buffer name, ascending
let g:easybuffer_bufname = 'SerbanEasyBufferBufName(bnr)'   " Display a custom path

" EDITORCONFIG
let g:EditorConfig_exclude_patterns = ['.\+\.go$']  " Custom indentation for golang is set below

" FZF
let g:fzf_layout = {'window': {'width': 0.95, 'height': 0.90}}
let g:fzf_history_dir = tempname() . '/' . 'fzf'    " fzf#wrap() creates this automatically when invoked

" FZF.VIM
let g:fzf_command_prefix = 'Fzf'
let g:fzf_preview_window = ['right,border-left,50%,<86(bottom,border-top,60%,hidden)', 'ctrl-g']

" NETRW
let g:netrw_nogx = 1

" NUMBERS
" I would simply call add(g:numbers_exclude, 'help') here, but g:numbers_exclude
" does not exist when this code is run. See numbers.vim for the default value.
let g:numbers_exclude = ['help', 'qf', 'tagbar']

" TABLE MODE
let g:table_mode_verbose = 0
let g:table_mode_motion_left_map  = '<M-S-h>'
let g:table_mode_motion_right_map = '<M-S-l>'
let g:table_mode_motion_down_map  = '<M-S-j>'
let g:table_mode_motion_up_map    = '<M-S-k>'

" TAGBAR
let g:tagbar_indent = 0
let g:tagbar_left = 1
let g:tagbar_show_visibility = 0
let g:tagbar_width = 60
let g:tagbar_zoomwidth = 0

" ULTISNIPS
let g:UltiSnipsListSnippets = '<M-s>'
let g:UltiSnipsExpandTrigger = '<M-f>'
let g:UltiSnipsJumpForwardTrigger = '<M-f>'
let g:UltiSnipsJumpBackwardTrigger = '<M-b>'

" VIM-GO
let g:go_doc_popup_window = 1
let g:go_fmt_command = 'goimports'
let g:go_highlight_functions = 0    " Makes vim laggy when enabled. See https://github.com/fatih/vim-go/issues/72
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 0      " Makes vim laggy when enabled. See https://github.com/fatih/vim-go/issues/72
let g:go_updatetime = 1

if !filereadable('/usr/share/vim/google/google.vim')
  let g:go_auto_sameids = 1
  let g:go_auto_type_info = 1
endif

" VIM-COMMENTARY
let g:commentary_map_backslash = 0  " Disable deprecated mappings

" VIM-MARK
let g:mw_no_mappings = 0
let g:mwAutoSaveMarks = 0

" VIM-MARKDOWN (TPOPE)
let g:markdown_minlines = 200
let g:markdown_yaml_head = 1
let g:markdown_fenced_languages = [
\   'bash',
\   'fish',
\   'c',
\   'cpp',
\   'go',
\   'java',
\   'javascript',
\   'kotlin',
\   'lua',
\   'perl',
\   'python',
\   'rust',
\   'sql',
\   'swift',
\   'vim',
\   'css',
\   'html',
\   'proto',
\   'json',
\   'toml',
\   'yaml',
\]

" VIM-MARKDOWN-FOLDING
let g:markdown_fold_override_foldtext = 0

" VIM-ZOOM
let g:zoom#statustext = 'Ⓩ   '

" YOUCOMPLETEME
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_complete_in_comments = 1
let g:ycm_warning_symbol = '🟠'
let g:ycm_error_symbol = '🔴'
let g:ycm_auto_hover = ''
let g:ycm_language_server = [
\   {
\     'name': 'ciderlsp',
\     'cmdline': [ '/google/bin/releases/cider/ciderlsp/ciderlsp', '--noforward_sync_responses' ],
\     'filetypes': [ 'java', 'kotlin' ]
\   },
\]

" ------------------------------------------------------------------------------
" NEOVIM PLUGIN SETTINGS

if has('nvim')
lua << EOF

require('telescope').setup({
  defaults = {
    layout_config = {
      horizontal = {
        prompt_position = 'top',
        width = 0.95,
        height = 0.90,
        preview_width = 0.50,
      },
    },
    sorting_strategy = 'ascending',
  },
})

require('nvim-treesitter.configs').setup({
  ensure_installed = {
    'bash',
    'c',
    'comment',
    'cpp',
    'css',
    'cuda',
    'dockerfile',
    'dot',
    'fish',
    'go',
    'html',
    'java',
    'javascript',
    'json',
    'jsonnet',
    'kotlin',
    'lua',
    'markdown',
    'markdown_inline',
    'proto',
    'python',
    'regex',
    'rst',
    'rust',
    'sql',
    'swift',
    'toml',
    'vim',
    'vimdoc',
    'yaml',
  },
  highlight = {enable = true},
  incremental_selection = {enable = true},
})

require('leap').add_default_mappings()

EOF
endif

" ------------------------------------------------------------------------------
" GLOBALS

let g:serban_statusline_path_relative = 0

let g:serban_command_palette_commands = [
\   'SerbanDumpRuntimePath',
\   'SerbanDisplayRuntimePath',
\   'SerbanInsertModeline',
\   'SerbanChangeWorkingDirToCurrentFileParent',
\   'SerbanSwitchGraphToProducerModule',
\   'SerbanEchoWorkingDir',
\   'SerbanEchoFilePath',
\   'SerbanAppendGoogle3File',
\   'SerbanAppendGoogle3Folder',
\   'SerbanGenerateSpellFiles',
\   'SerbanClearRegisters',
\   'SerbanDeleteBuffer',
\   'SerbanSaveSimpleSession',
\   'SerbanSortParagraph',
\   'SerbanFormatBullets',
\   'SerbanFormatShortlinks',
\   'SerbanHighlight',
\   'SerbanMarkPalette',
\   'SerbanRemoveHttpScheme',
\   'SerbanRemoveTrailingWhitespace',
\   'SerbanSetMacVimBackground',
\   'SerbanToggleBackground',
\   'SerbanToggleWinWidth',
\   'SerbanToggleColorColumn',
\   'SerbanToggleList',
\   'SerbanToggleSpell',
\   'SerbanToggleLineNumbers',
\   'SerbanToggleMacMeta',
\   'SerbanToggleStatusLinePath',
\   'SerbanToggleTypographyHighlighting',
\   'SerbanFzfNotes',
\   'SerbanFzfSource',
\   'SerbanFzfDotfiles',
\   'SerbanFzfWip',
\   'SerbanFzfProducerModules',
\   'SerbanFzfGoogle3Files',
\   'SerbanFzfGoogle3Folders',
\   'SerbanFzfSimpleSession',
\   'SerbanNewNote',
\   'SerbanRenameNote',
\   'SerbanOpenLink',
\   'SerbanWrapHard',
\   'SerbanWrapHint',
\   'SerbanWrapSoft',
\   'SerbanWrapNone',
\   'SerbanIndentSpaces2',
\   'SerbanIndentSpaces4',
\   'SerbanIndentSpaces8',
\   'SerbanIndentTabs2',
\   'SerbanIndentTabs4',
\   'SerbanIndentTabs8',
\   'SerbanIndentMixed4',
\]

" ------------------------------------------------------------------------------
" FUNCTIONS

function SerbanLog(m)
  if !has('nvim') && v:versionlong >= 9000472  " Vim 9.0.0472
    echow strftime('[%Y-%m-%d %H:%M:%S]') a:m
  else
    echom strftime('[%Y-%m-%d %H:%M:%S]') a:m
  endif
endfunction

function SerbanSep()
  if !has('nvim') && v:versionlong >= 9000472  " Vim 9.0.0472
    echow strftime('[%Y-%m-%d %H:%M:%S]') '───────────────────────────────────────────────────────'
  else
    echom strftime('[%Y-%m-%d %H:%M:%S]') '───────────────────────────────────────────────────────'
  endif
endfunction

function SerbanConfirm(prompt)
  echohl SerbanConfirmPrompt
  echo '■ ' . a:prompt . ' '
  let response = nr2char(getchar()) ==# 'y'
  if response
    echohl SerbanConfirmYes
    echon '✓'
  else
    echohl SerbanConfirmNo
    echon '✗'
  endif
  echohl None
  return response
endfunction

function SerbanDumpRuntimePath()
  echom '╭────────────────────────────────────────────────────────────────────╮'
  echom '│ packpath                                                           │'
  echom '╰────────────────────────────────────────────────────────────────────╯'
  for p in map(split(&packpath, ','), {i, v -> fnamemodify(v, ':~')})
    echom '  ' . p
  endfor
  echom '╭────────────────────────────────────────────────────────────────────╮'
  echom '│ runtimepath                                                        │'
  echom '╰────────────────────────────────────────────────────────────────────╯'
  for p in map(split(&runtimepath, ','), {i, v -> fnamemodify(v, ':~')})
    echom '  ' . p
  endfor
  echom ' ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈'
endfunction

function SerbanDisplayRuntimePath()
  let lines = map(split(&runtimepath, ','), {i, v -> fnamemodify(v, ':~')})
  let opts = {
  \   'title': ' runtimepath ',
  \   'padding': [1, 3, 1, 3],
  \   'maxheight': &lines - 7,
  \   'highlight': 'BufSelectHighlight',
  \   'borderhighlight': ['BufSelectBorderHighlight'],
  \}
  call popup_menu(lines, opts)
endfunction

function SerbanTabLine()
  let s = ''
  for i in range(1, tabpagenr('$'))
    let n = bufname(tabpagebuflist(i)[tabpagewinnr(i) - 1])
    let s .= '%' . i . 'T'
    let s .= (i ==# tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
    let s .= ' '
    let s .= (n ==# '' ? '[No Name]' : fnamemodify(n, ':t'))
    let s .= ' '
  endfor
  let s .= '%#TabLineFill#%T'
  return s
endfunction

function SerbanGuiTabLabel()
  let n = bufname(tabpagebuflist(v:lnum)[tabpagewinnr(v:lnum) - 1])

  if n ==# ''
    return '[No Name]'
  elseif fnamemodify(n, ':~') =~# '^\~/txt/.*\.md$'
    let s = fnamemodify(n, ':t:r')
    return
    \ tabpagenr('$') <# 3 ? s : substitute(s, '\v^\d\d\d\d-\d\d-\d\d ', '', '')
  else
    return fnamemodify(n, ':t')
  endif
endfunction

function SerbanStatusLine()
  let s  = g:serban_statusline_path_relative ? '%f ' : '%t '  " path or filename
  let s .= '%h%w%q%r%m'     " {help,preview,quickfix,readonly,modified} flags
  let s .= '%='             " left-right separator
  let s .= '%3v  '          " virtual column number under cursor
  let s .= 'U+%04B  '       " code point under cursor
  let s .= '%(%Y  %)'       " filetype
  let s .= '%{&spell ? "Ⓐ   " : ""}'        " window-local
  let s .= '%{&list ? "" : "Ⓛ   "}'         " window-local · NB: Indicator appears when list is disabled
  if has('gui_macvim')
  let s .= '%{&macmeta ? "" : "Ⓜ  "}'      " buffer-local · NB: Indicator appears when macmeta is off
  endif
  let s .= '%{&foldenable ? "Ⓕ   " : ""}'   " window-local
  let s .= ObsessionStatus('Ⓢ   ', '')
  let s .= '%{get(w:, "serban_typography_bad") ># 0 ? "Ⓣ   " : ""}'  " window-local
  if exists('g:loaded_foxytables')
  let s .= '%{foxytables#IsEnabledInBuffer() ? "Ⓧ   " : ""}'         " buffer-local
  endif
  let s .= '%{zoom#statusline()}' " Ⓩ       " window-local, effectively
  let s .= '%{SerbanCurrentWrap()}'         " window-local + buffer-local
  let s .= '  '
  return s
endfunction

function SerbanInsertModeline()
  if &expandtab
    let expandStr='et'
  else
    let expandStr='noet'
  endif

  call append(0, '# vim:' .
  \               ' ts=' . &tabstop .
  \               ' sw=' . &shiftwidth .
  \               ' sts=' . &softtabstop .
  \               ' ' . expandStr)

  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Inserted modeline'
endfunction

function SerbanChangeWorkingDirToCurrentFileParent()
  execute 'cd' fnameescape(expand('%:p:h'))
endfunction

function SerbanSwitchGraphToProducerModule()
  execute 'edit' substitute(expand('%:p'),
                 \          '\vGraph.java$', 'ProducerModule.java', '')
endfunction

function SerbanEchoWorkingDir()
  echohl SerbanWorkingDir
  echo substitute(fnamemodify(getcwd(), ':~'),
       \          '\v^/google/src/cloud/[^/]+/[^/]+/', '→ ', '')
  echohl None
endfunction

function SerbanEchoFilePath()
  echohl SerbanPath
  echo substitute(expand('%:p:~'),
       \          '\v^/google/src/cloud/[^/]+/[^/]+/', '→ ', '')
  echohl None
endfunction

function SerbanAppendGoogle3File()
  let path = substitute(expand('%:p'),
             \          '\v^/google/src/cloud/[^/]+/[^/]+/google3/', '', '')
  execute '!echo' path '>> ~/src/dotfiles-google/google3-files'
endfunction

function SerbanAppendGoogle3Folder()
  let path = substitute(getcwd(),
             \          '\v^/google/src/cloud/[^/]+/[^/]+/google3/', '', '')
  execute '!echo' path '>> ~/src/dotfiles-google/google3-folders'
endfunction

function SerbanGenerateSpellFiles()
  windo set spell
  mkspell! ~/.vim/spell/en.utf-8.add
  echom '--------------------------------------------------------------'
  mkspell! ~/.vim/spell/proper.utf-8.add
  echom '--------------------------------------------------------------'
  mkspell! ~/.vim/spell/google.utf-8.add
  echom '--------------------------------------------------------------'
  spellinfo
  echom '--------------------------------------------------------------'
  highlight SpellBad
  highlight SpellCap
  highlight SpellLocal
  highlight SpellRare
endfunction

" @ Unnamed Register
" - Small Delete Register
" = Expression Register
" / Last Search Pattern Register
function SerbanClearRegisters()
  for r in split('abcdefghijklmnopqrstuvwxyz0123456789@-=/', '\zs')
    call setreg(r, [])
  endfor
endfunction

function SerbanDeleteBuffer()
  if &modified
    echo 'Cannot delete modified buffer'
    return
  endif

  let onewin = winnr('$') ==# 1
  let empbuf = empty(bufname()) && getbufline('%', 1, '$') ==# ['']

  if onewin || empbuf
    execute 'bdelete'
  else
    execute 'enew | bdelete ' . bufnr()
  endif
endfunction

function SerbanDeleteEmptyBuffers(verbose)
  let predicate  = 'buflisted(v:val) && '
  let predicate .= 'empty(bufname(v:val)) && '
  let predicate .= 'getbufline(v:val, 1, "$") ==# [""] && '
  let predicate .= 'bufwinnr(v:val) <# 0'

  let buffers = filter(range(1, bufnr('$')), predicate)

  if empty(buffers)
    if a:verbose
      echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'No empty buffers to delete'
    endif
    return
  endif

  execute 'bdelete ' . join(buffers, ' ')
  if a:verbose
    echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Deleted empty buffers'
  endif
endfunction

function SerbanSaveSimpleSession()
  let prom = 'New Session › '
  let name = trim(input(prom))
  let date = strftime('%Y-%m-%d')
  let file = date . ' ' . name . '.txt'
  let path = '~/ses/' . file

  if name ==# ''
    echo '✗'
    return
  endif

  if filereadable(expand(path))
    redraw
    if !SerbanConfirm(path . ' ← Session exists. Overwrite?')
      return
    endif
  endif

  let paths = filter(bufselect#Buffers()[1], '!empty(v:val)')
  let paths = map(paths, {i, v -> fnamemodify(v, ':~')})

  call writefile(paths, expand(path))
endfunction

function SerbanLoadSimpleSession(file)
  let buf = bufnr()

  for path in readfile(a:file)
    execute 'edit' fnameescape(path)
  endfor

  execute 'silent' 'buffer' buf
endfunction

function SerbanEasyBufferBufName(bufferNumber)
  let path = expand('#' . a:bufferNumber . ':p:~')
  return substitute(path, '\v^/google/src/cloud/[^/]+/[^/]+/google3/', '', '')
endfunction

" '{,'}sort does not work because it selects the blank lines outside the paragraph.
"
" Use `execute "normal! …"` instead of just `normal! …` to avoid inserting a
" literal carriage return (aka U+0013 aka \r aka ^M aka <CR>) in the code. See:
" https://stackoverflow.com/questions/9724123/vim-functions-when-to-use-normal-when-to-use-exec-and-when-to-use-nothing
function SerbanSortParagraph()
  let v = winsaveview()
  execute "normal! vip:sort \<CR>"
  call winrestview(v)
endfunction

function SerbanFormatBullets()
  silent! %s/\v^[+-] /* /
  silent! %s/\v^  [*-] /  + /
  silent! %s/\v^    [*+] /    - /
  silent! %s/\v^      [*-] /      + /
  silent! %s/\v^        [*+] /        - /
  silent! %s/\v^          [*-] /          + /
  silent! %s/\v^            [*+] /            - /
  silent! %s/\v^              [*-] /              + /
  silent! %s/\v^                [*+] /                - /
  silent! %s/\v^                  [*-] /                  + /
  silent! %s/\v^                    [*+] /                    - /
  silent! %s/\v^                      [*-] /                      + /
  silent! %s/\v^                        [*+] /                        - /
  silent! %s/\v^                          [*-] /                          + /
  silent! %s/\v^                            [*+] /                            - /
  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Formatted bullets'
endfunction

function SerbanFormatShortlinks()
  silent! %s,\v(b|cl)/\d+\zs \ze[^-], - ,g
  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Formatted shortlinks'
endfunction

function SerbanHighlight()
  let g:serban_solarized_base03  = &background ==# 'dark' ? '#002b36' : '#fdf6e3'
  let g:serban_solarized_base02  = &background ==# 'dark' ? '#073642' : '#eee8d5'
  let g:serban_solarized_base01  = &background ==# 'dark' ? '#586e75' : '#93a1a1'
  let g:serban_solarized_base00  = &background ==# 'dark' ? '#657b83' : '#839496'
  let g:serban_solarized_base0   = &background ==# 'dark' ? '#839496' : '#657b83'
  let g:serban_solarized_base1   = &background ==# 'dark' ? '#93a1a1' : '#586e75'
  let g:serban_solarized_base2   = &background ==# 'dark' ? '#eee8d5' : '#073642'
  let g:serban_solarized_base3   = &background ==# 'dark' ? '#fdf6e3' : '#002b36'

  let g:serban_solarized_red     = '#dc322f'
  let g:serban_solarized_green   = '#859900'
  let g:serban_solarized_yellow  = '#b58900'
  let g:serban_solarized_blue    = '#268bd2'
  let g:serban_solarized_magenta = '#d33682'
  let g:serban_solarized_cyan    = '#2aa198'
  let g:serban_solarized_orange  = '#cb4b16'
  let g:serban_solarized_violet  = '#6c71c4'

  if has('gui_running')
    let g:terminal_ansi_colors = [
    \   g:serban_solarized_base02,
    \   g:serban_solarized_red,
    \   g:serban_solarized_green,
    \   g:serban_solarized_yellow,
    \   g:serban_solarized_blue,
    \   g:serban_solarized_magenta,
    \   g:serban_solarized_cyan,
    \   g:serban_solarized_base2,
    \   g:serban_solarized_base03,
    \   g:serban_solarized_orange,
    \   g:serban_solarized_base01,
    \   g:serban_solarized_base00,
    \   g:serban_solarized_base0,
    \   g:serban_solarized_violet,
    \   g:serban_solarized_base1,
    \   g:serban_solarized_base3,
    \]
  endif

  " NAME    ANSI  NOTES
  " -------------------------------
  " base03     8  Background Color
  " base02     0  Bar Color
  " base01    10
  " base00    11
  " base0     12  Foreground Color
  " base1     14
  " base2      7
  " base3     15
  " red        1  #dc322f
  " green      2  #859900
  " yellow     3  #b58900
  " blue       4  #268bd2
  " magenta    5  #d33682
  " cyan       6  #2aa198
  " orange     9  #cb4b16
  " violet    13  #6c71c4
  highlight SerbanRed                           cterm=none ctermbg=8  ctermfg=1
  highlight SerbanGreen                         cterm=none ctermbg=8  ctermfg=2
  highlight SerbanYellow                        cterm=none ctermbg=8  ctermfg=3
  highlight SerbanBlue                          cterm=none ctermbg=8  ctermfg=4
  highlight SerbanMagenta                       cterm=none ctermbg=8  ctermfg=5
  highlight SerbanCyan                          cterm=none ctermbg=8  ctermfg=6
  highlight SerbanOrange                        cterm=none ctermbg=8  ctermfg=9
  highlight SerbanViolet                        cterm=none ctermbg=8  ctermfg=13
  highlight SerbanGray                          cterm=none ctermbg=8  ctermfg=10
  highlight VertSplit                           cterm=none ctermbg=8  ctermfg=0
  highlight StatusLine                          cterm=none ctermbg=5  ctermfg=8
  highlight StatusLineNC                        cterm=none ctermbg=0  ctermfg=7
  highlight StatusLineTerm                      cterm=none ctermbg=2  ctermfg=8
  highlight StatusLineTermNC                    cterm=none ctermbg=0  ctermfg=7
  highlight SignColumn                          cterm=none ctermbg=8  ctermfg=12
  highlight TabLineFill                         cterm=none ctermbg=0  ctermfg=3
  highlight TabLine                             cterm=none ctermbg=0  ctermfg=7
  highlight TabLineSel                          cterm=none ctermbg=5  ctermfg=8
  highlight Folded                              cterm=none ctermbg=8  ctermfg=13
  highlight FoldColumn                          cterm=none ctermbg=0  ctermfg=13
  highlight NonText                             cterm=none ctermbg=8  ctermfg=0
  highlight qfFileName                          cterm=none ctermbg=8  ctermfg=13
  highlight QuickFixLine                        cterm=none ctermbg=0  ctermfg=13
  highlight SerbanConfirmPrompt                 cterm=none ctermbg=8  ctermfg=13
  highlight SerbanConfirmNo                     cterm=none ctermbg=8  ctermfg=1
  highlight SerbanConfirmYes                    cterm=none ctermbg=8  ctermfg=2
  highlight SerbanWorkingDir                    cterm=none ctermbg=8  ctermfg=10
  highlight SerbanPath                          cterm=none ctermbg=8  ctermfg=7
  highlight SerbanTypographyBad                 cterm=none ctermbg=1  ctermfg=8
  highlight SerbanTypographyGood                cterm=none ctermbg=2  ctermfg=8
  highlight BufSelectHighlight                  cterm=none ctermbg=8  ctermfg=7
  highlight BufSelectBorderHighlight            cterm=none ctermbg=8  ctermfg=7
  highlight PopupSelected                       cterm=none ctermbg=4  ctermfg=7
  highlight Pmenu                               cterm=none ctermbg=0  ctermfg=7
  highlight PmenuSel                            cterm=none ctermbg=4  ctermfg=7
  highlight PmenuSbar                           cterm=none ctermbg=10 ctermfg=7
  highlight PmenuThumb                          cterm=none ctermbg=14 ctermfg=7
  highlight goSameId                            cterm=none ctermbg=11 ctermfg=8
  highlight ctrlsfFilename                      cterm=none ctermbg=1  ctermfg=8
  highlight ctrlsfCuttingLine                   cterm=none ctermbg=8  ctermfg=1
  highlight ctrlsfLnumUnmatch                   cterm=none ctermbg=0  ctermfg=12
  highlight ctrlsfLnumMatch                     cterm=none ctermbg=0  ctermfg=12
  highlight ctrlsfMatch                         cterm=none            ctermfg=1
  highlight markdownHeadingDelimiter            cterm=bold ctermbg=8  ctermfg=9
  highlight markdownBlockquote                  cterm=none ctermbg=8  ctermfg=6
  highlight markdownListMarker                  cterm=none ctermbg=8  ctermfg=4
  highlight markdownOrderedListMarker           cterm=none ctermbg=8  ctermfg=4
  highlight markdownCodeDelimiter               cterm=none ctermbg=8  ctermfg=11
  highlight markdownCodeBlock                   cterm=none ctermbg=8  ctermfg=3
  highlight markdownCode                        cterm=none ctermbg=8  ctermfg=13
if !has('nvim')
  highlight SpellBad                            cterm=underline       ctermul=1
  highlight SpellCap                            cterm=underline       ctermul=3
  highlight SpellLocal                          cterm=underline       ctermul=6
  highlight SpellRare                           cterm=underline       ctermul=6
endif

  execute 'highlight SerbanRed                  gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_red
  execute 'highlight SerbanGreen                gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_green
  execute 'highlight SerbanYellow               gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_yellow
  execute 'highlight SerbanBlue                 gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_blue
  execute 'highlight SerbanMagenta              gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_magenta
  execute 'highlight SerbanCyan                 gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_cyan
  execute 'highlight SerbanOrange               gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_orange
  execute 'highlight SerbanViolet               gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight SerbanGray                 gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base01
  execute 'highlight VertSplit                  gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base02
  execute 'highlight StatusLine                 gui=none guibg=' . g:serban_solarized_magenta . ' guifg=' . g:serban_solarized_base03
  execute 'highlight StatusLineNC               gui=none guibg=' . g:serban_solarized_base02  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight StatusLineTerm             gui=none guibg=' . g:serban_solarized_green   . ' guifg=' . g:serban_solarized_base03
  execute 'highlight StatusLineTermNC           gui=none guibg=' . g:serban_solarized_base02  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight Folded                     gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight FoldColumn                 gui=none guibg=' . g:serban_solarized_base02  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight NonText                    gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base02
  execute 'highlight qfFileName                 gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight QuickFixLine               gui=none guibg=' . g:serban_solarized_base02  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight SerbanConfirmPrompt        gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight SerbanConfirmNo            gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_red
  execute 'highlight SerbanConfirmYes           gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_green
  execute 'highlight SerbanWorkingDir           gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base01
  execute 'highlight SerbanPath                 gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight SerbanTypographyBad        gui=none guibg=' . g:serban_solarized_red     . ' guifg=' . g:serban_solarized_base03
  execute 'highlight SerbanTypographyGood       gui=none guibg=' . g:serban_solarized_green   . ' guifg=' . g:serban_solarized_base03
  execute 'highlight BufSelectHighlight         gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight BufSelectBorderHighlight   gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight PopupSelected              gui=none guibg=' . g:serban_solarized_blue    . ' guifg=' . g:serban_solarized_base2
  execute 'highlight Pmenu                      gui=none guibg=' . g:serban_solarized_base02  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight PmenuSel                   gui=none guibg=' . g:serban_solarized_blue    . ' guifg=' . g:serban_solarized_base2
  execute 'highlight PmenuSbar                  gui=none guibg=' . g:serban_solarized_base01  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight PmenuThumb                 gui=none guibg=' . g:serban_solarized_base1   . ' guifg=' . g:serban_solarized_base2
  execute 'highlight markdownHeadingDelimiter   gui=bold guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_orange
  execute 'highlight markdownBlockquote         gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_cyan
  execute 'highlight markdownListMarker         gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_blue
  execute 'highlight markdownOrderedListMarker  gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_blue
  execute 'highlight markdownCodeDelimiter      gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base00
  execute 'highlight markdownCodeBlock          gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_yellow
  execute 'highlight markdownCode               gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight SpellBad                   gui=underline'                                . ' guisp=' . g:serban_solarized_red
  execute 'highlight SpellCap                   gui=underline'                                . ' guisp=' . g:serban_solarized_yellow
  execute 'highlight SpellLocal                 gui=underline'                                . ' guisp=' . g:serban_solarized_cyan
  execute 'highlight SpellRare                  gui=underline'                                . ' guisp=' . g:serban_solarized_cyan

  " https://github.com/vim/vim/issues/10785 - g:terminal_ansi_colors not setting background color of terminal in MacVim
  " https://github.com/vim/colorschemes/issues/198 - MacVim/GUI :terminal doesn't set Terminal background
  execute 'highlight Terminal                   gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base0

  " From the mark.vim documentation:
  " If you want to avoid losing the highlightings on :colorscheme commands,
  " you need to re-apply your highlights on the ColorScheme event.
  call SerbanMarkPalette()
endfunction

function SerbanMarkPalette()
  if !exists('g:mwPalettes')
    return
  endif

  let g:mwPalettes['serban'] = [
  \   { 'cterm':'none', 'ctermbg': 5, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_magenta, 'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 4, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_blue,    'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 1, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_red,     'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 2, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_green,   'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg':13, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_violet,  'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 6, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_cyan,    'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 1, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_red     },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 2, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_green   },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 3, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_yellow  },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 4, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_blue    },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 5, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_magenta },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 6, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_cyan    },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 9, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_orange  },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg':13, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_violet  },
  \]

  if has('gui_running')
    MarkPalette maximum
  else
    MarkPalette serban
  endif
endfunction

function SerbanRemoveHttpScheme()
  silent! %s,\vhttp://(b|cl|g|go|google3|g3doc|omg|yaqs)/,\1/,g
  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Removed http:// from shortlinks'
endfunction

function SerbanRemoveTrailingWhitespace()
  silent! %s/\v\s+$//
  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Removed trailing whitespace'
endfunction

function SerbanSetMacVimBackground()
  if v:os_appearance ==# 0
    set background=light
  else
    set background=dark
  endif
endfunction

function SerbanToggleBackground()
  if &background ==# 'light'
    set background=dark
  else
    set background=light
  endif
endfunction

function SerbanToggleWinWidth()
  if &winwidth ==# 86
    set winwidth=106
  else
    set winwidth=86
  endif
endfunction

function SerbanToggleColorColumn()
  if &colorcolumn !=# '0'
    windo set colorcolumn=0
  else
    windo set colorcolumn=+1
  endif
endfunction

function SerbanToggleList()
  if &list
    windo set nolist
  else
    windo set list
  endif
endfunction

function SerbanToggleSpell()
  if &spell
    windo set nospell
  else
    windo set spell
  endif
endfunction

function SerbanToggleLineNumbers()
  if &number
    NumbersDisable
    set nonumber
    set norelativenumber
  else
    NumbersEnable
  endif
endfunction

function SerbanToggleMacMeta()
  let buf = bufnr()
  if &macmeta
    silent bufdo set nomacmeta
  else
    silent bufdo set macmeta
  endif
  execute 'silent' 'buffer' buf
  redrawstatus!
endfunction

function SerbanToggleStatusLinePath()
  let g:serban_statusline_path_relative = !g:serban_statusline_path_relative
  redrawstatus!
endfunction

"   | Bad | Alt | Code Point                         |
"   |-----|:---:|------------------------------------|
"   | ... |  …  | U+2026 Horizontal Ellipsis         |
"   | -   |  ‐  | U+2010 Hyphen                      |
"   | -   |  ‒  | U+2012 Figure Dash                 |
"   | --  |  –  | U+2013 En Dash                     |
"   | --- |  —  | U+2014 Em Dash                     |
"   | --  |  ―  | U+2015 Horizontal Bar              |
"   | -   |  −  | U+2212 Minus Sign                  |
"   | -   |  ⁃  | U+2043 Hyphen Bullet               |
"   | x   |  ✗  | U+2717 Ballot X                    |
"   | x   |  ×  | U+00D7 Multiplication Sign         |
"   | '   |  ′  | U+2032 Prime                       |
"   | '   |  ‘  | U+2018 Left Single Quotation Mark  |
"   | '   |  ’  | U+2019 Right Single Quotation Mark |
"   | "   |  ″  | U+2033 Double Prime                |
"   | "   |  “  | U+201C Left Double Quotation Mark  |
"   | "   |  ”  | U+201D Right Single Quotation Mark |
function SerbanToggleTypographyHighlighting()
  if get(w:, 'serban_typography_bad') ># 0 || get(w:, 'serban_typography_good') ># 0
    let w:serban_typography_bad = matchdelete(w:serban_typography_bad)
    let w:serban_typography_good = matchdelete(w:serban_typography_good)
    return
  endif
  let w:serban_typography_bad = matchadd('SerbanTypographyBad', '\v\.{3}|-|x|''|"')
  let w:serban_typography_good = matchadd('SerbanTypographyGood',
                                 \        '\v…|‐|‒|–|—|―|−|⁃|✗|×|′|‘|’|″|“|”')
endfunction

function SerbanCommandPalette()
  call fzf#run(fzf#wrap('serban-command-palette', {
  \   'source': map(copy(g:serban_command_palette_commands),
  \                 {_, v -> substitute(v, '\v^Serban', '', '')}),
  \   'sink': function('SerbanCommandPaletteRun'),
  \   'window': {'width': 48, 'height': 0.90},
  \ }))
endfunction

function SerbanCommandPaletteRun(cmd)
  call feedkeys(':call Serban' . a:cmd . '()' . "\n", 'n')
endfunction

function SerbanFzfNotes()
  call fzf#run(fzf#wrap('serban-notes', fzf#vim#with_preview({
  \   'dir': '~/txt',
  \   'source': 'fd --type file --strip-cwd-prefix | sort',
  \   'options': '--prompt "⁖ ~/txt/" --no-sort',
  \ })))
endfunction

function SerbanFzfSource()
  call fzf#run(fzf#wrap('serban-source', fzf#vim#with_preview({
  \   'dir': '~/src',
  \   'options': '--prompt "⁖ ~/src/"',
  \   'sink': 'view',
  \ })))
endfunction

function SerbanFzfDotfiles()
  call fzf#run(fzf#wrap('serban-dotfiles', fzf#vim#with_preview({
  \   'dir': '~/src/dotfiles',
  \   'options': '--prompt "⁖ ~/src/dotfiles/"',
  \   'sink': 'view',
  \ })))
endfunction

function SerbanFzfWip()
  call fzf#run(fzf#wrap('serban-wip', fzf#vim#with_preview({
  \   'dir': '~/src/wip',
  \   'options': '--prompt "⁖ ~/src/wip/"',
  \   'sink': 'view',
  \ })))
endfunction

function SerbanFzfProducerModules()
  call fzf#run(fzf#wrap('serban-producer-modules', {
  \   'source': 'fd --type file --strip-cwd-prefix ProducerModule.java',
  \ }))
endfunction

function SerbanFzfGoogle3Files()
  call fzf#run(fzf#wrap('serban-google3-files', {
  \   'source': 'cat ~/src/dotfiles-google/google3-files',
  \   'sink': 'PiperOpenPath',
  \ }))
endfunction

function SerbanFzfGoogle3Folders()
  call fzf#run(fzf#wrap('serban-google3-folders', {
  \   'source': 'cat ~/src/dotfiles-google/google3-folders',
  \   'sink': 'PiperChangeDirectory',
  \ }))
endfunction

function SerbanFzfSimpleSession()
  call fzf#run(fzf#wrap('serban-simple-session', {
  \   'dir': '~/ses',
  \   'source': 'fd --type file --extension txt --strip-cwd-prefix',
  \   'sink': function('SerbanLoadSimpleSession'),
  \ }))
endfunction

function SerbanNewNote()
  call fzf#run(fzf#wrap('serban-new-note', {
  \   'dir': '~/txt',
  \   'source': "echo && fd --type directory --strip-cwd-prefix | sed 's|/$||'",
  \   'sink': function('SerbanNewNoteInDir'),
  \ }))
endfunction

function SerbanNewNoteInDir(dir)
  let prom = 'New Note' . (a:dir ==# '' ? ': ' : ' › ' . a:dir . ' › ')
  let name = trim(input(prom))
  let date = strftime('%Y-%m-%d')
  let head = '# ' . date . ' - ' . name
  let file = date . ' ' . name . '.md'
  let path = '~/txt/' . (a:dir ==# '' ? file : a:dir . '/' . file)
  let cont = [head, '', '‣ Draft']

  if name ==# ''
    echo '✗'
    return
  endif

  if filereadable(expand(path))
    redraw
    echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Note exists: ' . path
    return
  endif

  execute 'edit' path
  call setline(1, cont)  " setline() writes multiple lines when the second argument is a list
  execute 'write'
  normal! G$
endfunction

function SerbanRenameNote()
  " NB: matchlist() always returns a list of 10 items except
  "     “when there is no match an empty list is returned” 🙄
  " See https://vi.stackexchange.com/questions/22451/why-does-matchlist-return-empty-strings-at-the-end-of-the-result
  let head = getline(1)
  let toks = matchlist(head, '\v^# (\d{4}-\d{2}-\d{2}) - (.+)$')

  if len(toks) < 3
    echo '✗'
    return
  endif

  let date = toks[1]
  let name = toks[2]
  let file = date . ' ' . name . '.md'

  if !SerbanConfirm(file . ' ← Rename?')
    return
  endif

  execute 'Rename' fnameescape(file)
endfunction

function SerbanOpenLink()
  let link = expand('<cWORD>')

  if link =~# '\v^https?://'
    let url = link
  elseif link =~# '\v^\l+\@$'
    let url = 'http://who/' . link[0:-2]
  else
    let url = 'http://' . link
  endif

  echom strftime('[%Y-%m-%d %H:%M:%S]') '→' url
  silent let out = trim(system('open ' . shellescape(url)))
  if !empty(out)
    echom strftime('[%Y-%m-%d %H:%M:%S]') '!' out
  endif

  " Does not work with special characters like #, even using shellescape():
  " → E194: No alternate file name to substitute for '#'
  " silent execute '!open' url
  "
  " Must call redraw! after execution because (from :help :silent):
  " “for an external command, this may cause the screen to be messed up.”
  " redraw!
endfunction

" ------------------------------------------------------------------------------
" WRAP FUNCTIONS

" I like to work in four different wrap modes:
"
" * Hard Wrap - Vim automatically inserts newlines past a certain column
" * Hint Wrap - Vim shows a column guide but performs no wrapping
" * Soft Wrap - Vim shows full lines without altering the file
" *   No Wrap - Vim shows no guide and performs no wrapping
"
" These modes involve setting the following options, some of which are
" orthogonal to each other and some of which are not:
"
" * textwidth       buffer-local
" * formatoptions   buffer-local
" * colorcolumn     window-local
" * wrap            window-local
"
" When textwidth is zero, the lesser of the screen width or 79 is used to wrap
" code comments. See `:help autoformat` or `:help gq` for more.

function SerbanWrapHard()
  if &textwidth ==# 0
    set textwidth=80
  endif
  set formatoptions+=t
  set formatoptions+=c
  set colorcolumn=+1
  set nowrap
endfunction

function SerbanWrapHint()
  if &textwidth ==# 0
    set textwidth=80
  endif
  set formatoptions-=t
  set formatoptions-=c
  set colorcolumn=+1
  set nowrap
endfunction

function SerbanWrapSoft()
  set formatoptions-=t
  set formatoptions-=c
  set colorcolumn=0
  set wrap
endfunction

function SerbanWrapNone()
  set formatoptions-=t
  set formatoptions-=c
  set colorcolumn=0
  set nowrap
endfunction

function SerbanCurrentWrap()
  if &textwidth !=# 0 && stridx(&formatoptions, 't') !=# -1
    return 'HARD  ' . &textwidth
  elseif &textwidth !=# 0 && &colorcolumn !=# '0' && !&wrap
    return 'HINT  ' . &textwidth
  elseif &wrap
    return 'SOFT'
  else
    return 'NONE'
  endif
endfunction

" ------------------------------------------------------------------------------
" INDENTATION FUNCTIONS

" tabstop is the number of characters represented by a \t.
" shiftwidth is the number of characters in a shift operation like << or >>.
" softtabstop is the number of characters that a tab counts for.
" expandtab inserts only spaces when the tab key is pressed.

function SerbanIndentSpaces2()
  set tabstop=8 shiftwidth=2 softtabstop=2 expandtab
endfunction

function SerbanIndentSpaces4()
  set tabstop=8 shiftwidth=4 softtabstop=4 expandtab
endfunction

function SerbanIndentSpaces8()
  set tabstop=8 shiftwidth=8 softtabstop=8 expandtab
endfunction

function SerbanIndentTabs2()
  set tabstop=2 shiftwidth=2 softtabstop=0 noexpandtab
endfunction

function SerbanIndentTabs4()
  set tabstop=4 shiftwidth=4 softtabstop=0 noexpandtab
endfunction

function SerbanIndentTabs8()
  set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab
endfunction

" Mix tabs and spaces so that \t is 8 characters wide but indentation is aligned
" at 4-character boundaries. Leading whitespace consists of any number of tabs
" followed by 4 spaces if the start of the line is not aligned to an 8-character
" boundary.
function SerbanIndentMixed4()
  set tabstop=8 shiftwidth=4 softtabstop=4 noexpandtab
endfunction

" ------------------------------------------------------------------------------
" EVENT HANDLERS

" Alternatively, create ~/.vim/after/ftplugin/{cpp,go}.vim
autocmd FileType cpp       setlocal commentstring=//\ \ %s iskeyword-=-
autocmd FileType gitcommit setlocal spell
autocmd FileType go        setlocal tabstop=2 shiftwidth=2 softtabstop=0 noexpandtab nolist
autocmd FileType hgcommit  setlocal spell
autocmd FileType java      setlocal textwidth=100 winwidth=106
autocmd FileType lilypond  setlocal commentstring=%\ %s
autocmd FileType piperspec setlocal spell
autocmd FileType python    setlocal tabstop=8 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType swift     setlocal textwidth=100 winwidth=106

if has('gui_macvim')
augroup serban-darkmode
  autocmd!
  autocmd OSAppearanceChanged * call SerbanSetMacVimBackground()
  autocmd OSAppearanceChanged * syntax enable  " source after/syntax/*.vim files
  autocmd OSAppearanceChanged * call SerbanHighlight()
  autocmd OSAppearanceChanged * redraw
augroup end
endif

augroup serban-help
  autocmd!
  autocmd BufEnter *.txt if &buftype ==# 'help' | wincmd L | endif
augroup end

augroup serban-highlight
  autocmd!
  autocmd ColorScheme solarized silent call SerbanHighlight()
augroup end

augroup serban-log
  autocmd!
  autocmd BufNewFile  *.log silent call SerbanWrapNone()
  autocmd BufReadPost *.log silent call SerbanWrapNone()
augroup end

augroup serban-markdown
  autocmd!
  autocmd FileType markdown TableModeEnable
  autocmd FileType markdown autocmd BufWritePre <buffer> silent call SerbanRemoveTrailingWhitespace()
  " Override indentation settings back to my default of two spaces per indent.
  " Alternatively, `let g:markdown_recommended_style = 0`:
  " ↳ https://github.com/vim/vim/blob/6b066c6d8f57aa05f1ab29ab4d098bc4bfabb1bb/runtime/ftplugin/markdown.vim#L25
  " ↳ https://github.com/tpope/vim-markdown/commit/b78bbce3371a2eb56c89f618cd4ab2baadc9ee61
  autocmd FileType markdown setlocal tabstop=8 shiftwidth=2 softtabstop=2 expandtab
  autocmd FileType markdown setlocal iskeyword=@,48-57,-,_
  " https://github.com/vim/vim/issues/5206 - Make fillchars a local setting
  autocmd FileType markdown setlocal foldtext=getline(v:foldstart).'\ ' fillchars+=fold:·
  " https://github.com/preservim/vim-markdown/issues/232 - Rewrapping a bullet point inserts new bullet points
  " https://github.com/preservim/vim-markdown/issues/390 - gq wrapping is still broken
  autocmd FileType markdown setlocal comments=fb:*,fb:+,fb:-,n:> indentexpr=
  autocmd FileType markdown iabbrev <buffer> !- --------------------------------------------------------------------------------------------------------------------------------------------
  autocmd FileType markdown iabbrev <buffer> hc ```
  autocmd FileType markdown iabbrev <buffer> h1 #
  autocmd FileType markdown iabbrev <buffer> h2 ##
  autocmd FileType markdown iabbrev <buffer> h3 ###
  autocmd FileType markdown iabbrev <buffer> h4 ####
  autocmd FileType markdown iabbrev <buffer> h5 #####
  autocmd FileType markdown iabbrev <buffer> h6 ######
  autocmd FileType markdown iabbrev <buffer> ln ‣ Link:
  autocmd FileType markdown iabbrev <buffer> sj ‣ Subject:
  autocmd FileType markdown iabbrev <buffer> dt TODO
  autocmd FileType markdown iabbrev <buffer> td TODO:
  autocmd FileType markdown iabbrev <buffer> <expr> ud strftime('‣ Updated: %Y-%m-%d')
  autocmd FileType markdown iabbrev <buffer> <expr> hl strftime('## %Y-%m-%d %H:%M ·')
augroup end

" The pattern ~/txt/*.md matches all files ending in '.md' under ~/txt, even
" those in subdirectories.
augroup serban-text
  autocmd!
  autocmd BufNewFile  ~/txt/*.md setlocal textwidth=140
  autocmd BufNewFile  ~/txt/*.md silent call SerbanWrapHint()
  autocmd BufReadPost ~/txt/*.md setlocal textwidth=140
  autocmd BufReadPost ~/txt/*.md silent call SerbanWrapHint()
  autocmd BufWritePre ~/txt/*.md silent call SerbanFormatBullets()
  autocmd BufWritePre ~/txt/*.md silent call SerbanRemoveHttpScheme()
  autocmd BufWritePre ~/txt/*.md silent call SerbanFormatShortlinks()
augroup end

if !has('nvim')
augroup serban-terminal
  autocmd!
  autocmd TerminalWinOpen * setlocal statusline=%{term_gettitle(bufnr())}\ \ %=%(№\ %n\ \ %)
augroup end
endif

" ------------------------------------------------------------------------------
" COLORS

colorscheme solarized

" MacVim does not trigger the 'ColorScheme solarized' autocommand on startup.
" Not sure what's going on, but this hacky timer gets the job done.
if has('gui_macvim')
  function SerbanHighlightWrapper(_)
    call SerbanHighlight()
  endfunction
  call timer_start(400, 'SerbanHighlightWrapper')
endif

" ------------------------------------------------------------------------------
" ABBREVIATIONS

iabbrev td TODO(serban):
iabbrev ts TODO(serban):

iabbrev #t # TODO(serban):
iabbrev #s # TODO(serban): DO NOT SUBMIT

iabbrev /t // TODO(serban):
iabbrev /s // TODO(serban): DO NOT SUBMIT

iabbrev <expr> zd strftime('%Y-%m-%d')
iabbrev <expr> zt strftime('%Y-%m-%d %H:%M')

iabbrev !- ------------------------------------------------------------
iabbrev #- # ----------------------------------------------------------
iabbrev /- // ---------------------------------------------------------

" ------------------------------------------------------------------------------
" DIGRAPHS

digraphs ix    161  "  0x00a1  ¡  !I      Inverted Exclamation Mark
digraphs ce    162  "  0x00a2  ¢  Ct      Cent Sign
digraphs dl    171  "  0x00ab  «  <<      Left-Pointing Double Angle Quotation Mark
digraphs dg    176  "  0x00b0  °  DG      Degree Sign
digraphs pm    177  "  0x00b1  ±  +-      Plus-Minus Sign
digraphs md    183  "  0x00b7  ·  ~.      Middle Dot
digraphs dr    187  "  0x00bb  »  >>      Right-Pointing Double Angle Quotation Mark
digraphs iq    191  "  0x00bf  ¿  ?I      Inverted Question Mark
digraphs ml    215  "  0x00d7  ×  *X      Multiplication Sign
digraphs dv    247  "  0x00f7  ÷  -:      Division Sign
digraphs hy   8208  "  0x2010  ‐  -1      Hyphen
digraphs df   8210  "  0x2012  ‒          Figure Dash
digraphs dn   8211  "  0x2013  –  -N      En Dash
digraphs dm   8212  "  0x2014  —  -M      Em Dash
digraphs hb   8213  "  0x2015  ―  -3      Horizontal Bar
digraphs wl   8216  "  0x2018  ‘  '6      Left Single Quotation Mark
digraphs wr   8217  "  0x2019  ’  '9      Right Single Quotation Mark
digraphs ql   8220  "  0x201c  “  "6      Left Double Quotation Mark
digraphs qr   8221  "  0x201d  ”  "9      Right Double Quotation Mark
digraphs bl   8226  "  0x2022  •  oo      Bullet
digraphs bi   8227  "  0x2023  ‣          Triangular Bullet
digraphs el   8230  "  0x2026  …  ,.      Horizontal Ellipsis
digraphs sp   8242  "  0x2032  ′  1'      Prime
digraphs dp   8243  "  0x2033  ″  2'      Double Prime
digraphs sl   8249  "  0x2039  ‹  <1      Single Left-Pointing Angle Quotation Mark
digraphs sr   8250  "  0x203a  ›  >1      Single Right-Pointing Angle Quotation Mark
digraphs rm   8251  "  0x203b  ※  :X      Reference Mark
digraphs bh   8259  "  0x2043  ⁃          Hyphen Bullet
digraphs td   8278  "  0x2056  ⁖          Three Dot Punctuation
digraphs fd   8280  "  0x2058  ⁘          Four Dot Punctuation
digraphs eu   8364  "  0x20ac  €  Eu  =e  Euro Sign
digraphs no   8470  "  0x2116  №  N0      Numero Sign
digraphs al   8592  "  0x2190  ←  <-      Leftwards Arrow
digraphs au   8593  "  0x2191  ↑  -!      Upwards Arrow
digraphs ar   8594  "  0x2192  →  ->      Rightwards Arrow
digraphs ad   8595  "  0x2193  ↓  -v      Downwards Arrow
digraphs ac   8627  "  0x21b3  ↳          Downwards Arrow With Tip Rightwards
digraphs ah   8628  "  0x21b4  ↴          Rightwards Arrow With Corner Downwards
digraphs lr   8646  "  0x21c6  ⇆          Leftwards Arrow Over Rightwards Arrow
digraphs es   8709  "  0x2205  ∅  /0      Empty Set
digraphs mi   8722  "  0x2212  −  -2      Minus Sign
digraphs sq   8730  "  0x221a  √  RT      Square Root
digraphs ae   8776  "  0x2248  ≈  ?2      Almost Equal To
digraphs ne   8800  "  0x2260  ≠  !=      Not Equal To
digraphs le   8804  "  0x2264  ≤  =<      Less-Than Or Equal To
digraphs ge   8805  "  0x2265  ≥  >=      Greater-Than Or Equal To
digraphs bn   9004  "  0x232c  ⌬          Benzene Ring
digraphs bs   9632  "  0x25a0  ■  fS      Black Square
digraphs bc   9679  "  0x25cf  ●  0M      Black Circle
digraphs gr   9881  "  0x2699  ⚙          Gear
digraphs ch  10003  "  0x2713  ✓  OK      Check Mark
digraphs cr  10007  "  0x2717  ✗  XX      Ballot X
digraphs lc  10013  "  0x271d  ✝          Latin Cross
digraphs ba  10020  "  0x2724  ✤          Heavy Four Balloon-Spoked Asterisk
digraphs as  10043  "  0x273b  ✻          Teardrop-Spoked Asterisk
digraphs tl  10216  "  0x27e8  ⟨          Mathematical Left Angle Bracket
digraphs tr  10217  "  0x27e9  ⟩          Mathematical Right Angle Bracket
digraphs fl  65378  "  0xff62  ｢          Halfwidth Left Corner Bracket
digraphs fr  65379  "  0xff63  ｣          Halfwidth Right Corner Bracket

digraphs kc   8984  "  0x2318  ⌘          Place Of Interest Sign
digraphs ko   8997  "  0x2325  ⌥          Option Key
digraphs ku   8963  "  0x2303  ⌃          Up Arrowhead
digraphs ks   8679  "  0x21e7  ⇧          Upwards White Arrow

digraphs hd    248  "  0x00f8  ø  o/      Latin Small Letter O With Stroke
digraphs ma    916  "  0x0394  Δ  D*      Greek Capital Letter Delta
digraphs ag   8314  "  0x207a  ⁺  +S      Superscript Plus Sign
digraphs mf   9837  "  0x266d  ♭  Mb      Music Flat Sign
digraphs mn   9838  "  0x266e  ♮  Mx      Music Natural Sign
digraphs ms   9839  "  0x266f  ♯  MX      Music Sharp Sign
digraphs mx 119082  "  0x1d12a 𝄪          Musical Symbol Double Sharp
digraphs mb 119083  "  0x1d12b 𝄫          Musical Symbol Double Flat

digraphs n0   9450  "  0x24ea  ⓪
digraphs n1   9312  "  0x2460  ①
digraphs n2   9313  "  0x2461  ②
digraphs n3   9314  "  0x2462  ③
digraphs n4   9315  "  0x2463  ④
digraphs n5   9316  "  0x2464  ⑤
digraphs n6   9317  "  0x2465  ⑥
digraphs n7   9318  "  0x2466  ⑦
digraphs n8   9319  "  0x2467  ⑧
digraphs n9   9320  "  0x2468  ⑨

digraphs cd 128308  "  0x1f534 🔴         Large Red Circle
digraphs co 128992  "  0x1f7e0 🟠         Large Orange Circle
digraphs cy 128993  "  0x1f7e1 🟡         Large Yellow Circle
digraphs cg 128994  "  0x1f7e2 🟢         Large Green Circle
digraphs cb 128309  "  0x1f535 🔵         Large Blue Circle
digraphs cp 128995  "  0x1f7e3 🟣         Large Purple Circle

digraphs ck   9989  "  0x2705  ✅         White Heavy Check Mark
digraphs cx  10060  "  0x274c  ❌         Cross Mark

digraphs sk  10024  "  0x2728  ✨         Sparkles
digraphs fi 128293  "  0x1f525 🔥         Fire
digraphs si 128680  "  0x1f6a8 🚨         Police Cars Revolving Light

" ------------------------------------------------------------------------------
" KEY MAPPINGS

let mapleader = ' '

if has('nvim')
  nunmap <C-l>
endif

  " Disable man pages
  nnoremap <unique> K <Nop>

  " Make n search forward and N search backward always.
  nnoremap <unique> <expr> n (v:searchforward ? 'n' : 'N')
  nnoremap <unique> <expr> N (v:searchforward ? 'N' : 'n')

  " Make it harder to accidentally start macro recording.
  " Start and stop recording with Q instead of q.
  nnoremap <unique> q  <Nop>
  nnoremap <unique> Q  q

  " Make it harder to accidentally open the command line window.
  " It can still be done with :<C-f> or /<C-f> or ?<C-f>.
  nnoremap <unique> q: <Nop>
  nnoremap <unique> q/ <Nop>
  nnoremap <unique> q? <Nop>

  " Disable Ex-mode
  nnoremap <unique> gQ <Nop>

  nnoremap <unique> gx :call SerbanOpenLink() <CR>

  " Arrow keys move the cursor up and down a display line instead of a physical
  " line. Useful when soft-wrapping text.
  nnoremap <unique> <Up>   gk
  inoremap <unique> <Up>   <ESC>gka
  nnoremap <unique> <Down> gj
  inoremap <unique> <Down> <ESC>gja

  cnoremap <unique>  <F1> <ESC>
  inoremap <unique>  <F1> <ESC>
  nnoremap <unique>  <F1> <ESC>
  vnoremap <unique>  <F1> <ESC>
  nnoremap <unique>  <F2> :call SerbanIndentSpaces2() <CR>
  nnoremap <unique>  <F3> :call SerbanIndentTabs2() <CR>
  nnoremap <unique>  <F4> :call SerbanIndentSpaces4() <CR>
  nnoremap <unique>  <F5> :call SerbanIndentTabs4() <CR>
" nnoremap <unique>  <F6>
" nnoremap <unique>  <F7>
  nnoremap <unique>  <F8> :call SerbanIndentSpaces8() <CR>
  nnoremap <unique>  <F9> :call SerbanIndentTabs8() <CR>
  nnoremap <unique> <F10> :call SerbanCommandPalette() <CR>
" nnoremap <unique> <F11>
  nnoremap <unique> <F12> :call SerbanIndentMixed4() <CR>

  nnoremap <unique> <C-a> :botright vsplit <CR>
  nnoremap <unique> <C-b> :tabnew <CR>
  nnoremap <unique> <C-c> :close <CR>
" nnoremap <unique> <C-d>
" nnoremap <unique> <C-e>
" nnoremap <unique> <C-f>
  nnoremap <unique> <C-g> :split <CR>
  nnoremap <unique> <C-h> :wincmd h <CR>
" nnoremap <unique> <C-i>
  nnoremap <unique> <C-j> :wincmd j <CR>
  nnoremap <unique> <C-k> :wincmd k <CR>
  nnoremap <unique> <C-l> :wincmd l <CR>
" nnoremap <unique> <C-m>
  nnoremap <unique> <C-n> :tabnext <CR>
" nnoremap <unique> <C-o>
  nnoremap <unique> <C-p> :tabprevious <CR>
  nnoremap <unique> <C-q> :quitall <CR>
" nnoremap <unique> <C-r>
  nnoremap <unique> <C-s> :update <CR>
  inoremap <unique> <C-s> <ESC>:update <CR>
  vnoremap <unique> <C-s> <ESC>:update <CR>
" nnoremap <unique> <C-t>
" nnoremap <unique> <C-u>
" nnoremap <unique> <C-v>
" nnoremap <unique> <C-w>
  nnoremap <unique> <C-x> :call SerbanDeleteBuffer() <CR>
" nnoremap <unique> <C-y>
" nnoremap <unique> <C-z>

  " Meta keys do not work in MacVim without setting macmeta. See :help macmeta.
  nnoremap <unique> <M-c> r✓
  vnoremap <unique> <M-c> r✓
  nnoremap <unique> <M-d> r·
  vnoremap <unique> <M-d> r·
  nnoremap <unique> <M-e> r∅
  vnoremap <unique> <M-e> r∅
  nnoremap <unique> <M-h> :tabmove -1 <CR>
  nnoremap <unique> <M-j> :move +1 <CR>
  nnoremap <unique> <M-k> :move -2 <CR>
  nnoremap <unique> <M-l> :tabmove +1 <CR>
  nnoremap <unique> <M-n> :bnext <CR>
  nnoremap <unique> <M-p> :bprevious <CR>
  nnoremap <unique> <M-q> r?
  vnoremap <unique> <M-q> r?
  nnoremap <unique> <M-r> r✗
  vnoremap <unique> <M-r> r✗
  nnoremap <unique> <M-t> r~
  vnoremap <unique> <M-t> r~

  " <C-Arrow> works in iTerm2 and MacVim. It does not work in tmux. See:
  " • https://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
  " • https://stackoverflow.com/questions/38133250/cannot-get-control-arrow-keys-working-in-vim-through-tmux
  nnoremap <unique> <C-Left>  :tabmove -1 <CR>
  nnoremap <unique> <C-Right> :tabmove +1 <CR>
  nnoremap <unique> <C-Down>  :move +1 <CR>
  nnoremap <unique> <C-Up>    :move -2 <CR>

" nnoremap <unique> <Leader>a
  nnoremap <unique> <Leader>b :call SerbanNewNote() <CR>
  nnoremap <unique> <Leader>B :call SerbanRenameNote() <CR>
" nnoremap <unique> <Leader>c
  nnoremap <unique> <Leader>d :YcmCompleter GoToDeclaration <CR>
  nnoremap <unique> <Leader>e :CtrlPBuffer <CR>
  nnoremap <unique> <Leader>f :YcmCompleter GoToDefinition <CR>
" nnoremap <unique> <Leader>g
" nnoremap <unique> <Leader>h
  nnoremap <unique> <Leader>i :GoImports <CR>
" nnoremap <unique> <Leader>j
  nnoremap <unique> <Leader>k :marks abcdefghijklmnopqrstuvwxyz <CR>
  nnoremap <unique> <Leader>K :marks ABCDEFGHIJKLMNOPQRSTUVWXYZ <CR>
  nnoremap <unique> <Leader>l :Marks <CR>
      nmap <unique> <Leader>m <Plug>MarkSet
      nmap <unique> <Leader>n <Plug>MarkAllClear
  nnoremap <unique> <Leader>o :GoogleOutlineWindow <CR>
  nnoremap <unique> <Leader>p :call SerbanEchoWorkingDir() <CR>
      nmap <unique> <Leader>q <Plug>(ctrlp)
  nnoremap <unique> <Leader>Q :quitall! <CR>
" nnoremap <unique> <Leader>r
" nnoremap <unique> <Leader>s
" nnoremap <unique> <Leader>t
" nnoremap <unique> <Leader>u
" nnoremap <unique> <Leader>v
" nnoremap <unique> <Leader>w
" nnoremap <unique> <Leader>x
" nnoremap <unique> <Leader>y
  nnoremap <unique> <Leader>z :nohlsearch <CR>

  nnoremap <unique> <Leader>ac :Tabularize /:\zs<CR>
  nnoremap <unique> <Leader>ae :Tabularize /=<CR>
  nnoremap <unique> <Leader>at :Tabularize /<Bar><CR>
  nnoremap <unique> <Leader>af :call SerbanAppendGoogle3File() <CR>
  nnoremap <unique> <Leader>ao :call SerbanAppendGoogle3Folder() <CR>
  nnoremap <unique> <Leader>as :call SerbanSaveSimpleSession() <CR>

      nmap <unique> <Leader>cc <Plug>CtrlSFCwordExec
      nmap <unique> <Leader>cs <Plug>CtrlSFPrompt

  nnoremap <unique> <Leader>hb :FzfBuffers <CR>
  nnoremap <unique> <Leader>hf :FzfFiles <CR>
  nnoremap <unique> <Leader>hl :FzfBLines <CR>
  nnoremap <unique> <Leader>hi :FzfLines <CR>
  nnoremap <unique> <Leader>hm :FzfMarks <CR>
  nnoremap <unique> <Leader>hh :FzfHelptags <CR>
  nnoremap <unique> <Leader>hc :FzfCommands <CR>
  nnoremap <unique> <Leader>ha :FzfMaps <CR>
  nnoremap <unique> <Leader>hr :FzfRg<Space>
  nnoremap <unique> <Leader>ht :call SerbanFzfNotes() <CR>
  nnoremap <unique> <Leader>he :call SerbanFzfSource() <CR>
  nnoremap <unique> <Leader>hd :call SerbanFzfDotfiles() <CR>
  nnoremap <unique> <Leader>hw :call SerbanFzfWip() <CR>
  nnoremap <unique> <Leader>hs :call SerbanFzfSimpleSession() <CR>
  nnoremap <unique> <Leader>hg :call SerbanFzfGoogle3Files() <CR>
  nnoremap <unique> <Leader>ho :call SerbanFzfGoogle3Folders() <CR>
  nnoremap <unique> <Leader>hp :call SerbanFzfProducerModules() <CR>
  nnoremap <unique> <Leader>hz :call SerbanSwitchGraphToProducerModule() <CR>

  nnoremap <unique> <Leader>ib :Telescope buffers <CR>
  nnoremap <unique> <Leader>ic :Telescope commands <CR>
  nnoremap <unique> <Leader>ie :Telescope symbols <CR>
  nnoremap <unique> <Leader>if :Telescope find_files <CR>
  nnoremap <unique> <Leader>ig :Telescope grep_string <CR>
  nnoremap <unique> <Leader>ih :Telescope help_tags <CR>
  nnoremap <unique> <Leader>ii :Telescope builtin <CR>
  nnoremap <unique> <Leader>il :Telescope live_grep <CR>
  nnoremap <unique> <Leader>im :Telescope marks <CR>
  nnoremap <unique> <Leader>ir :Telescope resume <CR>
  nnoremap <unique> <Leader>is :Telescope spell_suggest <CR>
  nnoremap <unique> <Leader>iz :Telescope current_buffer_fuzzy_find <CR>
  nnoremap <unique> <Leader>in :let g:clang_include_fixer_query_mode=0<CR>:pyfile /usr/lib/clang-include-fixer/clang-include-fixer.py<CR>
  nnoremap <unique> <Leader>iq :let g:clang_include_fixer_query_mode=1<CR>:pyfile /usr/lib/clang-include-fixer/clang-include-fixer.py<CR>

  nnoremap <unique> <Leader>ro :call SerbanSortParagraph() <CR>
  nnoremap <unique> <Leader>rb :call SerbanFormatBullets() <CR>
  nnoremap <unique> <Leader>rs :call SerbanFormatShortlinks() <CR>
  nnoremap <unique> <Leader>rh :call SerbanRemoveHttpScheme() <CR>
  nnoremap <unique> <Leader>rw :call SerbanRemoveTrailingWhitespace() <CR>
  nnoremap <unique> <Leader>rr :checktime <CR>

  nnoremap <unique> <Leader>sb :call SerbanToggleBackground() <CR>
  nnoremap <unique> <Leader>sw :call SerbanToggleWinWidth() <CR>
  nnoremap <unique> <Leader>sc :call SerbanToggleColorColumn() <CR>
  nnoremap <unique> <Leader>sl :call SerbanToggleList() <CR>
  nnoremap <unique> <Leader>ss :call SerbanToggleSpell() <CR>
  nnoremap <unique> <Leader>sn :call SerbanToggleLineNumbers() <CR>
  nnoremap <unique> <Leader>sm :call SerbanToggleMacMeta() <CR>
  nnoremap <unique> <Leader>sp :call SerbanToggleStatusLinePath() <CR>
  nnoremap <unique> <Leader>sy :call SerbanToggleTypographyHighlighting() <CR>
  nnoremap <unique> <Leader>so :24messages <CR>
  nnoremap <unique> <Leader>st :TagbarToggle <CR>

  nnoremap <unique> <Leader>vc :call SerbanChangeWorkingDirToCurrentFileParent() <Bar> call SerbanEchoWorkingDir() <CR>
  nnoremap <unique> <Leader>vd :call SerbanDeleteEmptyBuffers(v:true) <CR>
  nnoremap <unique> <Leader>vh :call SerbanHighlight() <CR>
  nnoremap <unique> <Leader>vr :call SerbanClearRegisters() <Bar> registers <CR>
  nnoremap <unique> <Leader>vs :call SerbanGenerateSpellFiles() <CR>
  nnoremap <unique> <Leader>vv :botright vertical sview ~/src/dotfiles/vim/vimrc <CR>

  nnoremap <unique> <Leader>wh :call SerbanWrapHard() <CR>
  nnoremap <unique> <Leader>wi :call SerbanWrapHint() <CR>
  nnoremap <unique> <Leader>wo :call SerbanWrapSoft() <CR>
  nnoremap <unique> <Leader>wn :call SerbanWrapNone() <CR>

  nnoremap <unique> <Leader>1 :set guifont=Monaco:h10 <CR>
  nnoremap <unique> <Leader>2 :set guifont=Monaco:h12 <CR>
  nnoremap <unique> <Leader>3 :set guifont=Monaco:h15 <CR>
  nnoremap <unique> <Leader>4 :set guifont=Monaco:h18 <CR>
  nnoremap <unique> <Leader>5 :set guifont=Monaco:h24 <CR>

  nnoremap <unique> <Leader><Leader> :call SerbanEchoFilePath() <CR>

  nnoremap <silent> <unique> <Leader>, :call SerbanDeleteEmptyBuffers(v:false) <Bar> call bufselect#OpenMenu() <CR>

" Glug corpweb
" nnoremap <unique> <Leader>cs :CorpWebCs <C-R>=expand('<cword>')<CR><CR>
" nnoremap <unique> <Leader>cf :CorpWebCsFile <CR>
" nnoremap <unique> <Leader>cd :CorpWebDocFindFile <CR>
" nnoremap <unique> <Leader>cl :CorpWebCritiqueCl <CR>

" ------------------------------------------------------------------------------
" NOTES

if has('gui_running') && argc() ==# 0 && isdirectory(expand('~/txt'))
  cd ~/txt
endif

" ------------------------------------------------------------------------------
" LOCAL SETTINGS

if filereadable(expand('~/src/wip/vim/wip.vim'))
  source ~/src/wip/vim/wip.vim
endif

if filereadable(expand('~/.vim/local.vim'))
  source ~/.vim/local.vim
endif
