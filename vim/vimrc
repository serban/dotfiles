" ------------------------------------------------------------------------------
" VUNDLE

set nocompatible                    " Don't try to be compatible with the original vi

if filereadable(expand('/Applications/LilyPond.app/Contents/Resources/share/lilypond/current/vim/syntax/lilypond.vim'))
  set runtimepath+=/Applications/LilyPond.app/Contents/Resources/share/lilypond/current/vim
endif

call plug#begin('~/.vim/bundle')

" GitHub Plugins
Plug 'altercation/vim-colors-solarized'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dag/vim-fish'
Plug 'dhruvasagar/vim-table-mode'
Plug 'dyng/ctrlsf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'fatih/vim-go'
Plug 'godlygeek/tabular'
Plug 'google/vim-jsonnet'
Plug 'hashivim/vim-terraform'
Plug 'inkarkat/vim-ingo-library'
Plug 'inkarkat/vim-mark'
Plug 'inkarkat/vim-SearchHighlighting'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
Plug 'myusuf3/numbers.vim'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'troydm/easybuffer.vim'
Plug 'udalov/kotlin-vim'

" macOS: UltiSnips can crash MacVim on startup if it's linked against the wrong
" Python. Not the fault of UltiSnips. See:
"   + https://github.com/SirVer/ultisnips/issues/771
"   + https://github.com/SirVer/ultisnips/issues/900
"
" If problems persist, blow away ~/.vim/bundle/ultisnips and start over with
" :PluginInstall.
Plug 'SirVer/ultisnips'

if !filereadable('/usr/share/vim/google/google.vim')
  Plug 'ervandew/supertab'
endif

call plug#end()

" ------------------------------------------------------------------------------
" GOOGLE

if filereadable('/usr/share/vim/google/google.vim')
  let g:go_info_mode = 'guru'
  let g:go_gopls_enabled = 0

  source /usr/share/vim/google/google.vim

  Glug blazedeps auto_filetypes=`['go']`
  Glug codefmt
  Glug codefmt-google
  Glug fileswitch plugin[mappings]='<Leader>j'
  Glug outline-window
  Glug youcompleteme-google

  " Disable autogen because it slows down EasyBuffer
  Glaive autogen !plugin[autocmds]

  " Disabling autoformatting for C++, protocol buffers, and Python because
  " clang-format and pyformat always format the whole file instead of just the
  " lines that have changed. See https://github.com/google/vim-codefmt/issues/9.
  " Don't need it for Go because I have the vim-go plugin installed.
  "
  " autocmd FileType go AutoFormatBuffer gofmt
  " autocmd FileType c,cpp AutoFormatBuffer clang-format
  " autocmd FileType proto AutoFormatBuffer clang-format
  " autocmd FileType python AutoFormatBuffer pyformat
  autocmd FileType bzl AutoFormatBuffer buildifier

  autocmd FileType go setlocal textwidth=100 winwidth=106 colorcolumn=+1,121,141
endif

" ------------------------------------------------------------------------------
" SETTINGS

set title                             " Set the terminal title to something appropriate (like the filename being edited)
set helpheight=80                     " Set the minimum window height for help windows
set winheight=20                      " Set the minimum window height for split windows
set winwidth=86                       " Set the minimum window width for split windows
set winminheight=3                    " Set the minimum window height for collapsed windows
set winminwidth=5                     " Set the minimum window width for collapsed windows
set pumheight=7                       " Set the maximum number of items to show in the popup menu for insert mode completion
set tabpagemax=100                    " Set the maximum number of tabs that can be opened
set splitbelow                        " When horizontally splitting a window, insert the new window below the current one
set splitright                        " When vertically splitting a window, insert the new window to the right of the current one
set number                            " Show line numbers
set signcolumn=number                 " Show signs in the number column instead of the sign column
set ruler                             " Show the cursor position in the bottom right
set showcmd                           " Show a partial command as it is being built
set laststatus=2                      " Always show the status bar (it tells us the filename)
set guioptions-=T                     " Get rid of the toolbar in gVim
set guioptions+=c                     " Don't use popup dialogs in gVim
set guicursor+=n:blinkon0             " Don't blink the cursor in normal mode
set fillchars=vert:│                  " Use a box-drawing character to get a clean vertical line between splits
set titlestring=%t                    " Use a custom window title that just shows the filename
set tabline=%!SerbanTabLine()         " Use a custom tab line
set guitablabel=%!SerbanGuiTabLabel() " Use a custom tab title in gVim
set statusline=%!SerbanStatusLine()   " Use a custom status line

if has('gui_macvim') && has('gui_running')
  set guifont=Monaco:h15            " Use a good font in MacVim
  set lines=32                      " Centers nicely on a 13" MacBook Pro
  set columns=90                    " Centers nicely on a 13" MacBook Pro
endif

"set columns=114                    " Put this line in gvimrc. It makes the window wider.
"set lines=52                       " Put this line in gvimrc. It makes the window taller.
set textwidth=80
set wrapmargin=0
set colorcolumn=+1                  " Show a vertical line one character past the textwidth to help maintain line length
set numberwidth=5                   " Set the minimum gutter width so that switching back and forth between number and relativenumber isn't annoying
set nowrap                          " Don't soft-wrap lines
set linebreak                       " When soft-wrap is on (`set wrap`) then break lines at whitespace points instead of where the window boundary is
set display=lastline                " Show as much as possible of the last line in a window instead of replacing it entirely with at signs
set breakindent                     " Indent lines that are soft-wrapped with the characters in 'showbreak'
set showbreak=⧽\                    " Prepend these characters to continuations of soft-wrapped lines
set nofoldenable                    " Don't fold code
set sidescroll=16                   " When the cursor hits the end of the screen, scroll left or right by this many spaces
set sidescrolloff=10                " Always leave some space to the left and right of the cursor
set scrolloff=3                     " Always leave some lines above and below the cursor
set formatoptions=crqljt            " Auto-wrap comments, insert comment leader on <Enter>, gq formats comments, don't automatically fix long lines when entering insert mode, remove comment leaders when joining lines, hard wrap
set nojoinspaces                    " When formatting text, insert only one space at the end of a sentence.
set iskeyword+=-                    " Add hyphen to the list of characters that comprise a word
set encoding=utf-8                  " Default to UTF-8 encoding

set sessionoptions=buffers,curdir,folds,resize,tabpages,winpos,winsize  " What to preserve when saving a session

set printoptions=paper:letter,left:36pt,right:36pt,bottom:27pt,top:27pt,header:2  " American letter paper with ~ 1/2 inch margins
set printheader=%{strftime(\'%B\ %e,\ %Y\')}%=%N                                  " Print the date in the upper left corner and page number in the upper right corner of every page

syntax on                           " Colors!
set hlsearch                        " Highlight search results
set incsearch                       " Search as you type
set ignorecase                      " Case insensitive when searching...
set smartcase                       " unless there's an uppercase character in the search string
set gdefault                        " Replace all occurrences on a line by default (s/old/new/g)
set nowrapscan                      " Do not wrap around the end of the file when searching

set spellcapcheck=                  " Disable checking for a capital letter at the beginning of a sentence (SpellCap highlight).
set spelllang=en_us                 " Use American English for spell checking
set spellfile=~/.vim/spell/en.utf-8.add,~/.vim/spell/proper.utf-8.add,~/.vim/spell/google.utf-8.add

set listchars=tab:»\ ,trail:⚐       " Show tabs and trailing whitespace
set list

set tabstop=8                       " \t is 8 characters wide
set shiftwidth=2                    " Shift commands are 2 characters wide
set softtabstop=2                   " Indents are 2 characters wide
set expandtab                       " Only use spaces (\t will never be inserted)

set shiftround                      " Round indent to a multiple of shiftwidth for > and <, and in insert mode for CTRL-T, and CTRL-D
set autoindent                      " Keep the indentation the same when inserting a new line
"set smartindent                    " Syntax-aware indenting
set modeline                        " Modelines in files take precedent over these settings

" Don't move comment hashes to the beginning of the line when writing Python. This behavior is caused by smartindent.
inoremap # X#

set backspace=eol,indent,start      " Make life easier on crappy terminals

set mouse=a                         " Enable the mouse
set ttymouse=sgr                    " Support mouse past the 223rd column

set noautochdir                     " When enabled, keep the current directory in sync with the folder containing the open file
set autoread                        " If an open file has changed outside of Vim but was not modified inside of Vim, reload it without asking when running :checktime
set hidden                          " Allow buffers with unsaved changes to be hidden from view

" Vim sets `background` on startup based on the terminal's background color.
" This can sometimes result in Vim's theme being the opposite of the terminal's
" (light instead of dark or dark instead of light). When I want to toggle
" between light and dark themes in the terminal, I change the terminal colors in
" iTerm2 instead of toggling Vim's `background` setting. The Vim Solarized color
" scheme matches correctly with the terminal colors when `background=dark`, so
" peg the value here. See:
"   - :help 'background'
"   - :help t_RB
"   - :help v:termrbgresp
"   - https://vi.stackexchange.com/questions/16951/how-to-set-vims-background-based-on-terminals-background-colour
set background=dark

" Enable bracketed paste inside tmux. See :help xterm-bracketed-paste
if &term =~# 'screen'
  let &t_BE = "\e[?2004h"
  let &t_BD = "\e[?2004l"
  exec "set t_PS=\e[200~"
  exec "set t_PE=\e[201~"
endif

" ------------------------------------------------------------------------------
" PLUGIN SETTINGS

" CTRLP
let g:ctrlp_map = ''  " Mapped below with all the others
let g:ctrlp_match_window = 'order:ttb,min:20,max:20'
let g:ctrlp_switch_buffer = ''
let g:ctrlp_clear_cache_on_exit = 1  " NB: This calls ctrlp#clra() on exit. This clears all caches, even those of other running Vim sessions. Caches are only cleared if you invoke CtrlP during the Vim session.
let g:ctrlp_extensions = ['autoignore']

" CTRLSF
let g:ctrlsf_position = 'right'
let g:ctrlsf_winsize = 106
let g:ctrlsf_auto_focus = { 'at': 'done' }
let g:ctrlsf_auto_close = { 'normal': 0, 'compact': 0 }
let g:ctrlsf_auto_preview = 0
let g:ctrlsf_absolute_file_path = 0  " Does nothing when autochdir is set.
let g:ctrlsf_indent = 2

function g:CtrlSFAfterMainWindowInit()
  NumbersDisable
  set nonumber
  set norelativenumber
endfunction

" EASYBUFFER
let g:easybuffer_use_sequence = 1                           " Use ascending numbers instead of buffer numbers for quick switching
let g:easybuffer_sort_mode = 'n'                            " Sort by buffer name, ascending
let g:easybuffer_bufname = 'SerbanEasyBufferBufName(bnr)'   " Display a custom path

" EDITORCONFIG
let g:EditorConfig_exclude_patterns = ['.\+\.go$']  " Custom indentation for golang is set below

" FZF
let g:fzf_layout = {'window': {'width': 0.95, 'height': 0.90}}

" FZF.VIM
let g:fzf_command_prefix = 'Fzf'
let g:fzf_preview_window = ['right,50%,border-left']

" NUMBERS
" I would simply call add(g:numbers_exclude, 'help') here, but g:numbers_exclude
" does not exist when this code is run. See numbers.vim for the default value.
let g:numbers_exclude = ['help', 'qf', 'tagbar']

" TABLE MODE
let g:table_mode_verbose = 0

" TAGBAR
let g:tagbar_indent = 0
let g:tagbar_left = 1
let g:tagbar_show_visibility = 0
let g:tagbar_width = 60
let g:tagbar_zoomwidth = 0

" ULTISNIPS
let g:UltiSnipsExpandTrigger = '<C-Tab>'  " <Tab> works with Supertab but conflicts with YouCompleteMe
" let g:UltiSnipsListSnippets = '<C-Tab>'
let g:UltiSnipsJumpForwardTrigger = '<C-Down>'
let g:UltiSnipsJumpBackwardTrigger = '<C-Up>'

" VIM-GO
let g:go_doc_popup_window = 1
let g:go_fmt_command = 'goimports'
let g:go_highlight_functions = 0    " Makes vim laggy when enabled. See https://github.com/fatih/vim-go/issues/72
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 0      " Makes vim laggy when enabled. See https://github.com/fatih/vim-go/issues/72
let g:go_updatetime = 1

if !filereadable('/usr/share/vim/google/google.vim')
  let g:go_auto_sameids = 1
  let g:go_auto_type_info = 1
endif

" VIM-COMMENTARY
let g:commentary_map_backslash = 0  " Disable deprecated mappings

" VIM-MARK
let g:mw_no_mappings = 0
let g:mwAutoSaveMarks = 0

" VIM-MARKDOWN
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_new_list_item_indent = 0

" YOUCOMPLETEME
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_complete_in_comments = 1
let g:ycm_warning_symbol = '🟠'
let g:ycm_error_symbol = '🔴'
let g:ycm_auto_hover = ''
let g:ycm_language_server = [
\   {
\     'name': 'ciderlsp',
\     'cmdline': [ '/google/bin/releases/editor-devtools/ciderlsp', '--noforward_sync_responses' ],
\     'filetypes': [ 'java' ]
\   },
\]

" ------------------------------------------------------------------------------
" FUNCTIONS

function SerbanTabLine()
  let s = ''
  for i in range(1, tabpagenr('$'))
    let n = bufname(tabpagebuflist(i)[tabpagewinnr(i) - 1])
    let s .= '%' . i . 'T'
    let s .= (i ==# tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
    let s .= ' '
    let s .= (n ==# '' ? '[No Name]' : fnamemodify(n, ':t'))
    let s .= ' '
  endfor
  let s .= '%#TabLineFill#%T'
  return s
endfunction

function SerbanGuiTabLabel()
  let n = bufname(tabpagebuflist(v:lnum)[tabpagewinnr(v:lnum) - 1])

  if n ==# ''
    return '[No Name]'
  elseif fnamemodify(n, ':~') =~# '^\~/txt/.*\.md$'
    let s = fnamemodify(n, ':t:r')
    return
    \ tabpagenr('$') <# 3 ? s : substitute(s, '\v^\d\d\d\d-\d\d-\d\d ', '', '')
  else
    return fnamemodify(n, ':t')
  endif
endfunction

function SerbanStatusLine()
  let s  = '%t %h%w%q%r%m'
  let s .= '%='  " left-right separator
  let s .= '%3v  0x%02B  '
  let s .= strlen(&filetype) ? '%Y  ' : ''
  let s .= &spell ? 'Ⓐ   ' : ''
  let s .= ObsessionStatus('Ⓢ   ', '')
  let s .= SerbanCurrentWrap()
  let s .= '  '
  return s
endfunction

function SerbanInsertModeline()
  if &expandtab
    let expandStr='et'
  else
    let expandStr='noet'
  endif

  call append(0, '# vim:' .
  \               ' ts=' . &tabstop .
  \               ' sw=' . &shiftwidth .
  \               ' sts=' . &softtabstop .
  \               ' ' . expandStr)

  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Inserted modeline'
endfunction

function SerbanChangeWorkingDirToCurrentFileParent()
  execute 'cd' fnameescape(expand('%:p:h'))
endfunction

function SerbanSwitchGraphToProducerModule()
  execute 'edit' substitute(expand('%:p'),
                 \          '\vGraph.java$', 'ProducerModule.java', '')
endfunction

function SerbanEchoWorkingDir()
  echohl SerbanWorkingDir
  echo substitute(fnamemodify(getcwd(), ':~'),
       \          '\v^/google/src/cloud/[^/]+/[^/]+/', '→ ', '')
  echohl None
endfunction

function SerbanEchoFilePath()
  echohl SerbanPath
  echo substitute(expand('%:p:~'),
       \          '\v^/google/src/cloud/[^/]+/[^/]+/', '→ ', '')
  echohl None
endfunction

function SerbanAppendGoogle3File()
  let path = substitute(expand('%:p'),
             \          '\v^/google/src/cloud/[^/]+/[^/]+/google3/', '', '')
  execute '!echo' path '>> ~/src/dotfiles-google/google3-files'
endfunction

function SerbanAppendGoogle3Folder()
  let path = substitute(getcwd(),
             \          '\v^/google/src/cloud/[^/]+/[^/]+/google3/', '', '')
  execute '!echo' path '>> ~/src/dotfiles-google/google3-folders'
endfunction

function SerbanGenerateSpellFiles()
  set spell
  mkspell! ~/.vim/spell/en.utf-8.add
  echom '--------------------------------------------------------------'
  mkspell! ~/.vim/spell/proper.utf-8.add
  echom '--------------------------------------------------------------'
  mkspell! ~/.vim/spell/google.utf-8.add
  echom '--------------------------------------------------------------'
  spellinfo
  echom '--------------------------------------------------------------'
  highlight SpellBad
  highlight SpellCap
  highlight SpellLocal
  highlight SpellRare
endfunction

function SerbanDeleteBuffer()
  if &modified
    echo 'Cannot delete modified buffer'
    return
  endif

  let onewin = winnr('$') ==# 1
  let onetab = tabpagenr('$') ==# 1
  let empbuf = empty(bufname()) && getbufline('%', 1, '$') ==# ['']
  let delbuf = 'enew | split | bnext | bdelete'

  if onewin
    if onetab
      if empbuf
        echo 'Cannot close last window'
      else
        execute delbuf
      endif
    else
      execute 'bdelete'
    endif
  else
    if empbuf
      execute 'bdelete'
    else
      execute delbuf
    endif
  endif
endfunction

function SerbanDeleteEmptyBuffers(verbose)
  let predicate  = 'buflisted(v:val) && '
  let predicate .= 'empty(bufname(v:val)) && '
  let predicate .= 'getbufline(v:val, 1, "$") ==# [""] && '
  let predicate .= 'bufwinnr(v:val) <# 0'

  let buffers = filter(range(1, bufnr('$')), predicate)

  if empty(buffers)
    if a:verbose
      echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'No empty buffers to delete'
    endif
    return
  endif

  execute 'bdelete ' . join(buffers, ' ')
  if a:verbose
    echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Deleted empty buffers'
  endif
endfunction

function SerbanEasyBufferBufName(bufferNumber)
  let path = expand('#' . a:bufferNumber . ':p:~')
  return substitute(path, '\v^/google/src/cloud/[^/]+/[^/]+/google3/', '', '')
endfunction

function SerbanFormatBullets()
  silent! %s/\v^[+-] /* /g
  silent! %s/\v^  [*-] /  + /g
  silent! %s/\v^    [*+] /    - /g
  silent! %s/\v^      [*-] /      + /g
  silent! %s/\v^        [*+] /        - /g
  silent! %s/\v^          [*-] /          + /g
  silent! %s/\v^            [*+] /            - /g
  silent! %s/\v^              [*-] /              + /g
  silent! %s/\v^                [*+] /                - /g
  silent! %s/\v^                  [*-] /                  + /g
  silent! %s/\v^                    [*+] /                    - /g
  silent! %s/\v^                      [*-] /                      + /g
  silent! %s/\v^                        [*+] /                        - /g
  silent! %s/\v^                          [*-] /                          + /g
  silent! %s/\v^                            [*+] /                            - /g
  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Formatted bullets'
endfunction

function SerbanFormatShortlinks()
  silent! %s,\vb/\d+\zs \ze[^-], - ,g
  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Formatted shortlinks'
endfunction

function SerbanHighlight()
  let g:serban_solarized_base03  = &background ==# 'dark' ? '#002b36' : '#fdf6e3'
  let g:serban_solarized_base02  = &background ==# 'dark' ? '#073642' : '#eee8d5'
  let g:serban_solarized_base01  = &background ==# 'dark' ? '#586e75' : '#93a1a1'
  let g:serban_solarized_base00  = &background ==# 'dark' ? '#657b83' : '#839496'
  let g:serban_solarized_base0   = &background ==# 'dark' ? '#839496' : '#657b83'
  let g:serban_solarized_base1   = &background ==# 'dark' ? '#93a1a1' : '#586e75'
  let g:serban_solarized_base2   = &background ==# 'dark' ? '#eee8d5' : '#073642'
  let g:serban_solarized_base3   = &background ==# 'dark' ? '#fdf6e3' : '#002b36'

  let g:serban_solarized_red     = '#dc322f'
  let g:serban_solarized_green   = '#859900'
  let g:serban_solarized_yellow  = '#b58900'
  let g:serban_solarized_blue    = '#268bd2'
  let g:serban_solarized_magenta = '#d33682'
  let g:serban_solarized_cyan    = '#2aa198'
  let g:serban_solarized_orange  = '#cb4b16'
  let g:serban_solarized_violet  = '#6c71c4'

  if has('gui_running')
    let g:terminal_ansi_colors = [
    \   g:serban_solarized_base02,
    \   g:serban_solarized_red,
    \   g:serban_solarized_green,
    \   g:serban_solarized_yellow,
    \   g:serban_solarized_blue,
    \   g:serban_solarized_magenta,
    \   g:serban_solarized_cyan,
    \   g:serban_solarized_base2,
    \   g:serban_solarized_base03,
    \   g:serban_solarized_orange,
    \   g:serban_solarized_base01,
    \   g:serban_solarized_base00,
    \   g:serban_solarized_base0,
    \   g:serban_solarized_violet,
    \   g:serban_solarized_base1,
    \   g:serban_solarized_base3,
    \]
  endif

  " NAME    ANSI  NOTES
  " -------------------------------
  " base03     8  Background Color
  " base02     0  Bar Color
  " base01    10
  " base00    11
  " base0     12  Foreground Color
  " base1     14
  " base2      7
  " base3     15
  " red        1  #dc322f
  " green      2  #859900
  " yellow     3  #b58900
  " blue       4  #268bd2
  " magenta    5  #d33682
  " cyan       6  #2aa198
  " orange     9  #cb4b16
  " violet    13  #6c71c4
  highlight VertSplit                cterm=none ctermbg=8  ctermfg=0
  highlight StatusLine               cterm=none ctermbg=5  ctermfg=8
  highlight StatusLineNC             cterm=none ctermbg=0  ctermfg=7
  highlight SignColumn               cterm=none ctermbg=8  ctermfg=12
  highlight TabLineFill              cterm=none ctermbg=0  ctermfg=3
  highlight TabLine                  cterm=none ctermbg=0  ctermfg=7
  highlight TabLineSel               cterm=none ctermbg=5  ctermfg=8
  highlight qfFileName               cterm=none ctermbg=8  ctermfg=13
  highlight QuickFixLine             cterm=none ctermbg=0  ctermfg=13
  highlight SerbanWorkingDir         cterm=none ctermbg=8  ctermfg=10
  highlight SerbanPath               cterm=none ctermbg=8  ctermfg=7
  highlight BufSelectHighlight       cterm=none ctermbg=8  ctermfg=7
  highlight BufSelectBorderHighlight cterm=none ctermbg=8  ctermfg=7
  highlight PopupSelected            cterm=none ctermbg=4  ctermfg=7
  highlight goSameId                 cterm=none ctermbg=11 ctermfg=8
  highlight ctrlsfFilename           cterm=none ctermbg=1  ctermfg=8
  highlight ctrlsfCuttingLine        cterm=none ctermbg=8  ctermfg=1
  highlight ctrlsfLnumUnmatch        cterm=none ctermbg=0  ctermfg=12
  highlight ctrlsfLnumMatch          cterm=none ctermbg=0  ctermfg=12
  highlight ctrlsfMatch              cterm=none            ctermfg=1

  execute 'highlight VertSplit                gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base02
  execute 'highlight StatusLine               gui=none guibg=' . g:serban_solarized_magenta . ' guifg=' . g:serban_solarized_base03
  execute 'highlight StatusLineNC             gui=none guibg=' . g:serban_solarized_base02  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight qfFileName               gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight QuickFixLine             gui=none guibg=' . g:serban_solarized_base02  . ' guifg=' . g:serban_solarized_violet
  execute 'highlight SerbanPath               gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight BufSelectHighlight       gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight BufSelectBorderHighlight gui=none guibg=' . g:serban_solarized_base03  . ' guifg=' . g:serban_solarized_base2
  execute 'highlight PopupSelected            gui=none guibg=' . g:serban_solarized_blue    . ' guifg=' . g:serban_solarized_base2

  " From the mark.vim documentation:
  " If you want to avoid losing the highlightings on :colorscheme commands,
  " you need to re-apply your highlights on the ColorScheme event.
  call SerbanMarkPalette()
endfunction

function SerbanMarkPalette()
  if !exists('g:mwPalettes')
    return
  endif

  let g:mwPalettes['serban'] = [
  \   { 'cterm':'none', 'ctermbg': 5, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_magenta, 'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 4, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_blue,    'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 1, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_red,     'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 2, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_green,   'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg':13, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_violet,  'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 6, 'ctermfg': 8, 'gui':'none', 'guibg':g:serban_solarized_cyan,    'guifg':g:serban_solarized_base02  },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 1, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_red     },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 2, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_green   },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 3, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_yellow  },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 4, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_blue    },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 5, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_magenta },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 6, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_cyan    },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg': 9, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_orange  },
  \   { 'cterm':'none', 'ctermbg': 0, 'ctermfg':13, 'gui':'none', 'guibg':g:serban_solarized_base02,  'guifg':g:serban_solarized_violet  },
  \]

  if has('gui_running')
    MarkPalette maximum
  else
    MarkPalette serban
  endif
endfunction

function SerbanRemoveHttpScheme()
  silent! %s,\vhttp://b/,b/,g
  silent! %s,\vhttp://g/,g/,g
  silent! %s,\vhttp://cl/,cl/,g
  silent! %s,\vhttp://go/,go/,g
  silent! %s,\vhttp://yaqs/,yaqs/,g
  silent! %s,\vhttp://google3/,google3/,g
  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Removed http:// from shortlinks'
endfunction

function SerbanRemoveTrailingWhitespace()
  silent! %s/\v\s+$//g
  echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Removed trailing whitespace'
endfunction

function SerbanSetMacVimBackground()
  if v:os_appearance ==# 0
    set background=light
  else
    set background=dark
  endif
endfunction

function SerbanToggleBackground()
  if &background ==# 'light'
    set background=dark
  else
    set background=light
  endif
endfunction

function SerbanToggleColorColumn()
  if &colorcolumn !=# '0'
    windo set colorcolumn=0
  else
    windo set colorcolumn=+1
  endif
endfunction

function SerbanToggleWinWidth()
  if &winwidth ==# 86
    set winwidth=106
  else
    set winwidth=86
  endif
endfunction

function SerbanToggleLineNumbers()
  if &number
    NumbersDisable
    set nonumber
    set norelativenumber
  else
    NumbersEnable
  endif
endfunction

" FYI: The following does not work:
"
"   nnoremap <unique> <Leader>am :Toc <Bar> wincmd H <CR>
"
" This is because the command Toc is defined as:
"
"   command! -buffer Toc call s:Toc()
"
" In order to prevent Vim from interpreting `|` as an argument to the command,
" it would have to be defined using `command -bar`. See `help :command-bar` and
" https://unix.stackexchange.com/questions/144568/how-do-i-write-a-command-in-vim-to-run-multiple-commands.
function SerbanToc()
  let id = win_getid()
  let ln = '[TOC]\ ' . fnameescape(expand('%:t'))
  Toc
  execute 'setlocal statusline=' . ln
  wincmd H
  vertical resize 40
  setlocal winfixwidth
  call win_gotoid(id)
endfunction

function SerbanFzfProducerModules()
  call fzf#run(fzf#wrap({
  \   'source': 'fd --type file --strip-cwd-prefix ProducerModule.java',
  \ }))
endfunction

function SerbanFzfGoogle3Files()
  call fzf#run(fzf#wrap({
  \   'source': 'cat ~/src/dotfiles-google/google3-files',
  \   'sink': 'PiperOpenPath',
  \ }))
endfunction

function SerbanFzfGoogle3Folders()
  call fzf#run(fzf#wrap({
  \   'source': 'cat ~/src/dotfiles-google/google3-folders',
  \   'sink': 'PiperChangeDirectory',
  \ }))
endfunction

function SerbanNewNote()
  call fzf#run(fzf#wrap({
  \   'dir': '~/txt',
  \   'source': 'echo && fd --type directory --strip-cwd-prefix',
  \   'sink': function('SerbanNewNoteInDir'),
  \ }))
endfunction

function SerbanNewNoteInDir(dir)
  let prom = 'New Note' . (a:dir ==# '' ? ': ' : ' › ' . a:dir . ' › ')
  let name = trim(input(prom))
  let date = strftime('%Y-%m-%d')
  let head = '# ' . date . ' - ' . name
  let file = date . ' ' . name . '.md'
  let path = '~/txt/' . (a:dir ==# '' ? file : a:dir . '/' . file)

  if name ==# ''
    echo '✗'
    return
  endif

  if filereadable(expand(path))
    redraw
    echom strftime('[%Y-%m-%d %H:%M:%S] ') . 'Note exists: ' . path
    return
  endif

  execute 'edit' path
  call setline(1, head)
  execute 'write'
  normal! $
endfunction

" ------------------------------------------------------------------------------
" WRAP FUNCTIONS

" I like to work in four different wrap modes:
"
" * Hard Wrap - Vim automatically inserts newlines past a certain column
" * Hint Wrap - Vim shows a column guide but performs no wrapping
" * Soft Wrap - Vim shows full lines without altering the file
" *   No Wrap - Vim shows no guide and performs no wrapping
"
" These modes involve setting the following options, some of which are
" orthogonal to each other and some of which are not:
"
" * textwidth
" * formatoptions
" * colorcolumn
" * wrap
"
" When textwidth is zero, the lesser of the screen width or 79 is used to wrap
" code comments. See `:help autoformat` or `:help gq` for more.

function SerbanWrapHard()
  if &textwidth ==# 0
    set textwidth=80
  endif
  set formatoptions+=t
  set colorcolumn=+1
  set nowrap
endfunction

function SerbanWrapHint()
  if &textwidth ==# 0
    set textwidth=80
  endif
  set formatoptions-=t
  set colorcolumn=+1
  set nowrap
endfunction

function SerbanWrapSoft()
  set formatoptions-=t
  set colorcolumn=0
  set wrap
endfunction

function SerbanWrapNone()
  set formatoptions-=t
  set colorcolumn=0
  set nowrap
endfunction

function SerbanCurrentWrap()
  if &textwidth !=# 0 && stridx(&formatoptions, 't') !=# -1
    return 'HARD  ' . &textwidth
  elseif &textwidth !=# 0 && &colorcolumn !=# '0' && !&wrap
    return 'HINT  ' . &textwidth
  elseif &wrap
    return 'SOFT'
  else
    return 'NONE'
  endif
endfunction

" ------------------------------------------------------------------------------
" INDENTATION FUNCTIONS

" tabstop is the number of characters represented by a \t.
" shiftwidth is the number of characters in a shift operation like << or >>.
" softtabstop is the number of characters that a tab counts for.
" expandtab inserts only spaces when the tab key is pressed.

function SerbanIndentSpaces2()
  set tabstop=8 shiftwidth=2 softtabstop=2 expandtab
endfunction

function SerbanIndentSpaces4()
  set tabstop=8 shiftwidth=4 softtabstop=4 expandtab
endfunction

function SerbanIndentSpaces8()
  set tabstop=8 shiftwidth=8 softtabstop=8 expandtab
endfunction

function SerbanIndentTabs2()
  set tabstop=2 shiftwidth=2 softtabstop=0 noexpandtab
endfunction

function SerbanIndentTabs4()
  set tabstop=4 shiftwidth=4 softtabstop=0 noexpandtab
endfunction

function SerbanIndentTabs8()
  set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab
endfunction

" Mix tabs and spaces so that \t is 8 characters wide but indentation is aligned
" at 4-character boundaries. Leading whitespace consists of any number of tabs
" followed by 4 spaces if the start of the line is not aligned to an 8-character
" boundary.
function SerbanIndentMixed4()
  set tabstop=8 shiftwidth=4 softtabstop=4 noexpandtab
endfunction

" ------------------------------------------------------------------------------
" EVENT HANDLERS

" Alternatively, create ~/.vim/after/ftplugin/{cpp,go}.vim
autocmd FileType cpp    set commentstring=//\ \ %s iskeyword-=-
autocmd FileType go     set tabstop=2 shiftwidth=2 softtabstop=0 noexpandtab nolist
autocmd FileType java   set textwidth=100 winwidth=106
autocmd FileType python set tabstop=8 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType swift  set textwidth=100 winwidth=106

if has('gui_macvim')
augroup serban-darkmode
  autocmd!
  autocmd OSAppearanceChanged * call SerbanSetMacVimBackground()
  autocmd OSAppearanceChanged * call SerbanHighlight()
  autocmd OSAppearanceChanged * redraw
augroup end
endif

augroup serban-help
  autocmd!
  autocmd BufEnter *.txt if &buftype ==# 'help' | wincmd L | endif
augroup end

augroup serban-highlight
  autocmd!
  autocmd ColorScheme solarized silent call SerbanHighlight()
augroup end

augroup serban-markdown
  autocmd!
  autocmd FileType markdown TableModeEnable
  autocmd FileType markdown autocmd BufWritePre <buffer> silent call SerbanRemoveTrailingWhitespace()
augroup end

" The pattern ~/txt/*.md matches all files ending in '.md' under ~/txt, even
" those in subdirectories.
augroup serban-text
  autocmd!
  autocmd BufNewFile  ~/txt/*.md silent call SerbanWrapSoft()
  autocmd BufReadPost ~/txt/*.md silent call SerbanWrapSoft()
  autocmd BufWritePre ~/txt/*.md silent call SerbanFormatBullets()
  autocmd BufWritePre ~/txt/*.md silent call SerbanRemoveHttpScheme()
  autocmd BufWritePre ~/txt/*.md silent call SerbanFormatShortlinks()
augroup end

" ------------------------------------------------------------------------------
" COLORS

colorscheme solarized

" MacVim does not trigger the 'ColorScheme solarized' autocommand on startup.
" Not sure what's going on, but this hacky timer gets the job done.
if has('gui_macvim')
  function SerbanHighlightWrapper(_)
    call SerbanHighlight()
  endfunction
  call timer_start(400, 'SerbanHighlightWrapper')
endif

" ------------------------------------------------------------------------------
" ABBREVIATIONS

iabbrev td TODO(serban):
iabbrev #t # TODO(serban):
iabbrev /t // TODO(serban):

iabbrev <expr> zd strftime('%Y-%m-%d')
iabbrev <expr> zt strftime('%Y-%m-%d %H:%M')

iabbrev !- ------------------------------------------------------------
iabbrev #- # ----------------------------------------------------------
iabbrev /- // ---------------------------------------------------------

" ------------------------------------------------------------------------------
" DIGRAPHS

digraphs dl   171  "  0x00ab  «  <<
digraphs dg   176  "  0x00b0  °  DG
digraphs pm   177  "  0x00b1  ±  +-
digraphs md   183  "  0x00b7  ·  ~.
digraphs dr   187  "  0x00bb  »  >>
digraphs ml   215  "  0x00d7  ×  *X
digraphs dv   247  "  0x00f7  ÷  -:
digraphs ql  8220  "  0x201c  “  "6
digraphs qr  8221  "  0x201d  ”  "9
digraphs bl  8226  "  0x2022  •  oo
digraphs el  8230  "  0x2026  …  ,.
digraphs sl  8249  "  0x2039  ‹  <1
digraphs sr  8250  "  0x203a  ›  >1
digraphs al  8592  "  0x2190  ←  <-
digraphs au  8593  "  0x2191  ↑  -!
digraphs ar  8594  "  0x2192  →  ->
digraphs ad  8595  "  0x2193  ↓  -v
digraphs lr  8646  "  0x21c6  ⇆
digraphs mi  8722  "  0x2212  −  -2
digraphs sq  8730  "  0x221a  √  RT
digraphs ae  8776  "  0x2248  ≈  ?2
digraphs ne  8800  "  0x2260  ≠  !=
digraphs le  8804  "  0x2264  ≤  =<
digraphs ge  8805  "  0x2265  ≥  >=
digraphs bs  9632  "  0x25a0  ■  fS
digraphs bc  9679  "  0x25cf  ●  0M
digraphs ch 10003  "  0x2713  ✓  OK
digraphs cr 10007  "  0x2717  ✗  XX

digraphs n0  9450  "  0x24ea  ⓪
digraphs n1  9312  "  0x2460  ①
digraphs n2  9313  "  0x2461  ②
digraphs n3  9314  "  0x2462  ③
digraphs n4  9315  "  0x2463  ④
digraphs n5  9316  "  0x2464  ⑤
digraphs n6  9317  "  0x2465  ⑥
digraphs n7  9318  "  0x2466  ⑦
digraphs n8  9319  "  0x2467  ⑧
digraphs n9  9320  "  0x2468  ⑨

" ------------------------------------------------------------------------------
" KEY MAPPINGS

let mapleader = ' '

  " Disable man pages
  nnoremap <unique> K <Nop>

  " Make n search forward and N search backward always.
  nnoremap <unique> <expr> n (v:searchforward ? 'n' : 'N')
  nnoremap <unique> <expr> N (v:searchforward ? 'N' : 'n')

  " Disable Ex-mode
  nnoremap <unique> Q  <Nop>
  nnoremap <unique> gQ <Nop>
  nnoremap <unique> q: <Nop>

  " Arrow keys move the cursor up and down a display line instead of a physical
  " line. Useful when soft-wrapping text.
  nnoremap <unique> <Up>   gk
  inoremap <unique> <Up>   <ESC>gka
  nnoremap <unique> <Down> gj
  inoremap <unique> <Down> <ESC>gja

  cnoremap <unique>  <F1> <ESC>
  inoremap <unique>  <F1> <ESC>
  nnoremap <unique>  <F1> <ESC>
  vnoremap <unique>  <F1> <ESC>
  nnoremap <unique>  <F2> :call SerbanIndentSpaces2() <CR>
  nnoremap <unique>  <F3> :call SerbanIndentTabs2() <CR>
  nnoremap <unique>  <F4> :call SerbanIndentSpaces4() <CR>
  nnoremap <unique>  <F5> :call SerbanIndentTabs4() <CR>
" nnoremap <unique>  <F6>
" nnoremap <unique>  <F7>
  nnoremap <unique>  <F8> :call SerbanIndentSpaces8() <CR>
  nnoremap <unique>  <F9> :call SerbanIndentTabs8() <CR>
" nnoremap <unique> <F10>
" nnoremap <unique> <F11>
  nnoremap <unique> <F12> :call SerbanIndentMixed4() <CR>

  nnoremap <unique> <C-a> :botright vsplit <CR>
  nnoremap <unique> <C-b> :tabnew <CR>
  nnoremap <unique> <C-c> :close <CR>
" nnoremap <unique> <C-d>
" nnoremap <unique> <C-e>
" nnoremap <unique> <C-f>
  nnoremap <unique> <C-g> :split <CR>
  nnoremap <unique> <C-h> :wincmd h <CR>
" nnoremap <unique> <C-i>
  nnoremap <unique> <C-j> :wincmd j <CR>
  nnoremap <unique> <C-k> :wincmd k <CR>
  nnoremap <unique> <C-l> :wincmd l <CR>
" nnoremap <unique> <C-m>
  nnoremap <unique> <C-n> :tabnext <CR>
" nnoremap <unique> <C-o>
  nnoremap <unique> <C-p> :tabprevious <CR>
  nnoremap <unique> <C-q> :quitall <CR>
" nnoremap <unique> <C-r>
  nnoremap <unique> <C-s> :update <CR>
  inoremap <unique> <C-s> <ESC>:update <CR>
" nnoremap <unique> <C-t>
" nnoremap <unique> <C-u>
" nnoremap <unique> <C-v>
" nnoremap <unique> <C-w>
  nnoremap <unique> <C-x> :call SerbanDeleteBuffer() <CR>
" nnoremap <unique> <C-y>
" nnoremap <unique> <C-z>

  " TODO(serban): Does not work in tmux. See:
  " - https://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
  " - https://stackoverflow.com/questions/38133250/cannot-get-control-arrow-keys-working-in-vim-through-tmux
  nnoremap <unique> <C-Left>  :tabmove -1 <CR>
  nnoremap <unique> <C-Right> :tabmove +1 <CR>

" nnoremap <unique> <Leader>a
  nnoremap <unique> <Leader>b :call SerbanNewNote() <CR>
" nnoremap <unique> <Leader>c
  nnoremap <unique> <Leader>d :YcmCompleter GoToDeclaration <CR>
  nnoremap <unique> <Leader>e :CtrlPBuffer <CR>
  nnoremap <unique> <Leader>f :YcmCompleter GoToDefinition <CR>
" nnoremap <unique> <Leader>g
" nnoremap <unique> <Leader>h
  nnoremap <unique> <Leader>i :GoImports <CR>
" nnoremap <unique> <Leader>j
  nnoremap <unique> <Leader>k :marks abcdefghijklmnopqrstuvwxyz <CR>
  nnoremap <unique> <Leader>K :marks ABCDEFGHIJKLMNOPQRSTUVWXYZ <CR>
  nnoremap <unique> <Leader>l :Marks <CR>
      nmap <unique> <Leader>m <Plug>MarkSet
      nmap <unique> <Leader>n <Plug>MarkAllClear
  nnoremap <unique> <Leader>o :GoogleOutlineWindow <CR>
  nnoremap <unique> <Leader>p :call SerbanEchoWorkingDir() <CR>
      nmap <unique> <Leader>q <Plug>(ctrlp)
" nnoremap <unique> <Leader>r
" nnoremap <unique> <Leader>s
" nnoremap <unique> <Leader>t
" nnoremap <unique> <Leader>u
" nnoremap <unique> <Leader>v
" nnoremap <unique> <Leader>w
" nnoremap <unique> <Leader>x
" nnoremap <unique> <Leader>y
  nnoremap <unique> <Leader>z :nohlsearch <CR>

  nnoremap <unique> <Leader>ac :Tabularize /:\zs<CR>
  nnoremap <unique> <Leader>ae :Tabularize /=<CR>
  nnoremap <unique> <Leader>at :Tabularize /<Bar><CR>
  nnoremap <unique> <Leader>af :call SerbanAppendGoogle3File() <CR>
  nnoremap <unique> <Leader>ao :call SerbanAppendGoogle3Folder() <CR>
  nnoremap <unique> <Leader>am :call SerbanToc() <CR>

      nmap <unique> <Leader>cc <Plug>CtrlSFCwordExec

  nnoremap <unique> <Leader>hb :FzfBuffers <CR>
  nnoremap <unique> <Leader>hf :FzfFiles <CR>
  nnoremap <unique> <Leader>hl :FzfBLines <CR>
  nnoremap <unique> <Leader>hi :FzfLines <CR>
  nnoremap <unique> <Leader>hm :FzfMarks <CR>
  nnoremap <unique> <Leader>hh :FzfHelptags <CR>
  nnoremap <unique> <Leader>hc :FzfCommands <CR>
  nnoremap <unique> <Leader>ha :FzfMaps <CR>
  nnoremap <unique> <Leader>hg :call SerbanFzfGoogle3Files() <CR>
  nnoremap <unique> <Leader>ho :call SerbanFzfGoogle3Folders() <CR>
  nnoremap <unique> <Leader>hp :call SerbanFzfProducerModules() <CR>
  nnoremap <unique> <Leader>hz :call SerbanSwitchGraphToProducerModule() <CR>

  nnoremap <unique> <Leader>in :let g:clang_include_fixer_query_mode=0<CR>:pyfile /usr/lib/clang-include-fixer/clang-include-fixer.py<CR>
  nnoremap <unique> <Leader>iq :let g:clang_include_fixer_query_mode=1<CR>:pyfile /usr/lib/clang-include-fixer/clang-include-fixer.py<CR>

  nnoremap <unique> <Leader>rb :call SerbanFormatBullets() <CR>
  nnoremap <unique> <Leader>rs :call SerbanFormatShortlinks() <CR>
  nnoremap <unique> <Leader>rh :call SerbanRemoveHttpScheme() <CR>
  nnoremap <unique> <Leader>rw :call SerbanRemoveTrailingWhitespace() <CR>

  nnoremap <unique> <Leader>sb :call SerbanToggleBackground() <CR>
  nnoremap <unique> <Leader>sc :call SerbanToggleColorColumn() <CR>
  nnoremap <unique> <Leader>sm :call SerbanToggleWinWidth() <CR>
  nnoremap <unique> <Leader>sn :call SerbanToggleLineNumbers() <CR>
  nnoremap <unique> <Leader>sl :set list! <CR>
  nnoremap <unique> <Leader>ss :set spell! <CR>
  nnoremap <unique> <Leader>st :TagbarToggle <CR>

  nnoremap <unique> <Leader>vc :call SerbanChangeWorkingDirToCurrentFileParent() <Bar> call SerbanEchoWorkingDir() <CR>
  nnoremap <unique> <Leader>vd :call SerbanDeleteEmptyBuffers(v:true) <CR>
  nnoremap <unique> <Leader>vh :call SerbanHighlight() <CR>
  nnoremap <unique> <Leader>vs :call SerbanGenerateSpellFiles() <CR>

  nnoremap <unique> <Leader>wh :call SerbanWrapHard() <CR>
  nnoremap <unique> <Leader>wi :call SerbanWrapHint() <CR>
  nnoremap <unique> <Leader>wo :call SerbanWrapSoft() <CR>
  nnoremap <unique> <Leader>wn :call SerbanWrapNone() <CR>

  nnoremap <unique> <Leader>1 :set guifont=Monaco:h10 <CR>
  nnoremap <unique> <Leader>2 :set guifont=Monaco:h12 <CR>
  nnoremap <unique> <Leader>3 :set guifont=Monaco:h15 <CR>
  nnoremap <unique> <Leader>4 :set guifont=Monaco:h18 <CR>
  nnoremap <unique> <Leader>5 :set guifont=Monaco:h24 <CR>

  nnoremap <unique> <Leader><Leader> :call SerbanEchoFilePath() <CR>

  nnoremap <silent> <unique> <Leader>, :call SerbanDeleteEmptyBuffers(v:false) <Bar> call bufselect#OpenMenu() <CR>

" Glug corpweb
" nnoremap <unique> <Leader>cs :CorpWebCs <C-R>=expand('<cword>')<CR><CR>
" nnoremap <unique> <Leader>cf :CorpWebCsFile <CR>
" nnoremap <unique> <Leader>cd :CorpWebDocFindFile <CR>
" nnoremap <unique> <Leader>cl :CorpWebCritiqueCl <CR>

" ------------------------------------------------------------------------------
" NOTES

if has('gui_running') && argc() ==# 0 && isdirectory(expand('~/txt'))
  cd ~/txt
endif

" ------------------------------------------------------------------------------
" LOCAL SETTINGS

if filereadable(expand('~/.vimrc_local'))
  source ~/.vimrc_local
endif
