#!/usr/bin/env python3

import dataclasses
import re
import subprocess

import packaging.version

RESET  = '\033[0m'
RED    = '\033[31m'
GREEN  = '\033[32m'
YELLOW = '\033[33m'
CYAN   = '\033[36m'

VIM_REGEX = r'VIM - Vi IMproved (.+) \(.*\s.*\sIncluded patches: 1-(.+)'

@dataclasses.dataclass
class Package:
  name: str
  args: list[str]
  regx: str
  date: str
  okay: str
  want: str
  have: str = '∅'
  colo: str = RED
  mark: str = '✗'

packages = [
    Package('bat',    ['bat', '--version'],     r'bat (.+)',           '2023-03-22', '0.22.1',   '0.22.1'),
    Package('delta',  ['delta', '--version'],   r'\033\[0mdelta (.+)', '2023-03-22', '0.15.1',   '0.15.1'),
    Package('fd',     ['fd', '--version'],      r'fd(?:find)? (.+)',   '2023-03-22', '8.4.0',    '8.7.0'),
    Package('fish',   ['fish', '--version'],    r'fish, version (.+)', '2023-03-22', '3.6.0',    '3.6.0'),
    Package('fzf',    ['fzf', '--version'],     r'(.+) \(.*',          '2023-03-22', '0.35.0',   '0.38.0'),
    Package('git',    ['git', '--version'],     r'git version (.+)',   '2023-03-22', '2.40.0',   '2.40.0'),
    Package('less',   ['less', '--version'],    r'less (.+) \(.*',     '2023-03-22', '590',      '608'),
    Package('lf',     ['lf', '--version'],      r'r?(.+)',             '2023-03-22', '27',       '28'),
    Package('neovim', ['nvim', '--version'],    r'NVIM v(.+)',         '2023-03-22', '0.8.3',    '0.8.3'),
    Package('python', ['python3', '--version'], r'Python (.+)',        '2023-03-22', '3.11.2',   '3.11.2'),
    Package('tmux',   ['tmux', '-V'],           r'tmux (.+)',          '2023-03-22', '3.3a',     '3.3a'),
    Package('vim',    ['vim', '--version'],     VIM_REGEX,             '2023-03-22', '9.0.1378', '9.0.1400'),
]

for p in packages:
  try:
    output = subprocess.run(
        p.args, check=True, stdout=subprocess.PIPE).stdout.decode().strip()
  except (FileNotFoundError, subprocess.CalledProcessError):
    continue

  m = re.match(p.regx, output)
  if not m:
    continue

  p.have = m.group(1) if p.name != 'vim' else f'{m.group(1)}.{m.group(2)}'

  okay = packaging.version.parse(p.okay)
  want = packaging.version.parse(p.want)

  try:
    have = packaging.version.parse(p.have)
  except packaging.version.InvalidVersion:
    have = packaging.version.parse('0')

  if have >= okay:
    p.colo = YELLOW
    p.mark = '·'

  if have == want:
    p.colo = GREEN
    p.mark = '✓'

  if have > want:
    p.colo = CYAN
    p.mark = '✓'

for p in packages:
  print(f'{p.colo}{p.mark}{RESET}  {p.name:6}  {p.okay:8}  {p.want:8}  {p.colo}{p.have:8}{RESET}')
